{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#overview","title":"Overview","text":"<p>JODConverter, the Java OpenDocument Converter, converts documents between different office formats. It leverages LibreOffice or Apache OpenOffice, which provide arguably the best free import/export filters for OpenDocument and Microsoft Office formats available today.</p> <p>JODConverter automates all conversions supported by LibreOffice/OpenOffice. Supported conversions include (but not limited to. All conversions supported by your OOo installation is supported by JODConverter):</p> Document Type Input Format Output Format Text DOC, DOCX, ODT, OTT, RTF, TEXT, etc. DOC, DOCX, HTML, JPG, ODT, OTT, FODT, PDF, PNG, RTF, TXT, etc. Spreadsheet CSV, ODS, OTS, TSV, XLS, XLSX, etc. CSV, HTML, JPG, ODS, OTS, FODS, PDF, PNG, TSV, XLS, XLSX, etc. Presentation ODP, OTP, PPT, PPTX, etc. GIF, HTML, JPG, ODP, OTP, FODP, PDF, PNG, PPT, PPTX, BMP, etc. Drawing ODG, OTG, etc. GIF, JPG, ODG, OTG, FODG, PDF, PNG, SVG, TIF, VSD, BMP, etc. Other HTML DOC, DOCX, HTML, JPG, ODT, OTT, FODT, PDF, PNG, RTF, TXT, etc. <p>JODConverter can be used in different ways:</p> <ul> <li>As a Java library, embedded in your own Java application (Web or not).</li> <li>As a command line tool, possibly invoked from your own scripts.</li> </ul>"},{"location":"#modules","title":"Modules","text":"<p>The JODConverter project contains 8 modules.</p>"},{"location":"#jodconverter-cli","title":"jodconverter-cli","text":"<p>Client command line tool. See the dedicated page to know more about this tool.</p>"},{"location":"#jodconverter-core","title":"jodconverter-core","text":"<p>Dependencies</p> <p>Core abstractions, used by JODConverter library implementations, such as <code>jodconverter-local</code> or <code>jodconverter-remote</code>.</p>"},{"location":"#jodconverter-local","title":"jodconverter-local","text":"<p>Dependencies</p> <p>Module required to process local conversions.</p>"},{"location":"#jodconverter-local-oo","title":"jodconverter-local-oo","text":"<p>Dependencies</p> <p>Module required to process local conversions, using the OpenOffice libraries. Using this module is in fact the exact same thing as using the <code>jodconverter-local</code> module. By default, JODConverter is built using the OpenOffice libraries. See here to know why.</p>"},{"location":"#jodconverter-local-oo_1","title":"jodconverter-local-oo","text":"<p>Dependencies</p> <p>Module required to process local conversions, using the LibreOffice libraries.</p>"},{"location":"#jodconverter-remote","title":"jodconverter-remote","text":"<p>Dependencies</p> <p>Module required to process remote conversions, which means sending conversion requests to a remote API.</p>"},{"location":"#jodconverter-spring","title":"jodconverter-spring","text":"<p>Dependencies</p> <p>Spring integration module.</p>"},{"location":"#jodconverter-spring-boot-starter","title":"jodconverter-spring-boot-starter","text":"<p>Dependencies</p> <p>Spring Boot integration module.</p>"},{"location":"#support","title":"Support <sup>\ud83d\udcac</sup>","text":"<p>JODConverter Gitter Community , growing FAQ.</p>"},{"location":"#original-jodconverter","title":"Original JODConverter","text":"<p>JODConverter (Java OpenDocument Converter) automates document conversions using LibreOffice or OpenOffice.org.</p> <p>The previous home for this project is at Google Code, including some wiki pages.</p>"},{"location":"#donations","title":"Donations","text":"<p>If this project helps you, please consider a cup of \u2615. Thanks!! \ud83d\udc96</p> <p></p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v4410-2025-07-18","title":"v4.4.10 (2025-07-18)","text":"<p>Full Changelog</p> <p>Closed issues:</p> <ul> <li>Improve documentation</li> <li>Change the logging level for expected error \"office process died with exit code 81\" from warn to info.</li> </ul>"},{"location":"changelog/#v449-2025-05-15","title":"v4.4.9 (2025-05-15)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Remove the disableOpengl option. #426</li> </ul> <p>Fixed bugs:</p> <ul> <li>Libre Office disconnects when converting a password protected ODT file to   PDF #423</li> <li>On more recent Java version like Java 17, JODconverter has runtime exception Unable to create instance   DocumentFormat #408</li> </ul>"},{"location":"changelog/#v448-2024-09-01","title":"v4.4.8 (2024-09-01)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Add xlsm support in DefaultDocumentFormatRegistry #391</li> </ul> <p>Fixed bugs:</p> <ul> <li>No qualifying bean of type 'org.jodconverter.core.DocumentConverter'   available #390</li> <li>Task keeps hanging when using Remote JodConverter #384</li> <li>Scanner (IO) bug #383</li> </ul> <p>Closed issues:</p> <ul> <li>Incompatible with LO 24.x (probably?) on macos #386</li> <li>Removed unnecessary <code>@ConfigurationPropertiesScan</code> on <code>JodConverterLocalProperties</code> and   <code>JodConverterRemoteProperties</code> #377</li> <li>Information about supported properties and their   meaning #372</li> <li>The Word document with more than 12 pages will automatically cancel the   task. #364</li> <li>pptx file conversion of PDF failed #359</li> </ul> <p>Merged pull requests:</p> <ul> <li>Remove unnecessary ConfigurationPropertiesScan   annotation #378 (bianjp)</li> </ul>"},{"location":"changelog/#v447-2023-12-13","title":"v4.4.7 (2023-12-13)","text":"<p>Full Changelog</p> <p>Fixed bugs:</p> <ul> <li>Using SpringBoot autoconfiguration with a remote setup fails with   ClassNotFoundException #331</li> </ul> <p>Merged pull requests:</p> <ul> <li>add support for websocket urps available &gt;= LibreOffice   24.2 #355 (caolanm)</li> <li>Add support for additional HTML extension   alias #338 (LiamMacP)</li> </ul>"},{"location":"changelog/#v446-2023-01-27","title":"v4.4.6 (2023-01-27)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Added the ability to provide a custom-document-formats.json   file #323</li> <li>Jodconverter not working with spring-boot 3 #320</li> </ul> <p>Merged pull requests:</p> <ul> <li>Spring boot 3.0 compatibility fixes   #320 #322 (EugenMayer)</li> </ul>"},{"location":"changelog/#v445-2022-12-21","title":"v4.4.5 (2022-12-21)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>ExternalOfficeManager does not work #278</li> </ul> <p>Fixed bugs:</p> <ul> <li>java.lang.NullPointerException: byExtension(extension) must not be   null #319</li> <li>Missing classes exception for the   DefaultDocumentFormatRegistry #317</li> <li>Failed to start bean 'documentationPluginsBootstrapper' when starting rest   version #315</li> <li>IndexOutOfBoundsException: Index: 1, Size: 1 when Run multiple tasks in   concurrent. #310</li> <li>Got error when using org.jodconverter:   jodconverter-local-lo #309</li> </ul> <p>Merged pull requests:</p> <ul> <li>Migrate to swagger v3 / openapi - fixes   #317 #318 (EugenMayer)</li> </ul>"},{"location":"changelog/#v444-2022-09-22","title":"v4.4.4 (2022-09-22)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Change default UpdateDocMode behavior and add new option to keep old behavior.</li> <li>Added FilterData and FilterOption do DocumentFormat builder.</li> </ul>"},{"location":"changelog/#v443-2022-09-15","title":"v4.4.3 (2022-09-15)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Provide builds of both OpenOffice and LibreOffice dependencies in the maven   center #273</li> <li>support keepAliveOnShutdown through CLI #269</li> <li>Issues converting potx and xltx #259</li> </ul> <p>Fixed bugs:</p> <ul> <li>gradle build fail~~~~ with libreoffice 7.1.5 #271</li> </ul> <p>Closed issues:</p> <ul> <li>Task :distZip FAILED #303</li> <li>Added WEB document family #297</li> <li>Spring configuration metadata json not generated #295</li> <li>Specific Exception for Password Protected files #233</li> </ul> <p>Merged pull requests:</p> <ul> <li>Update to spring boot 2.7.3 to fix   CVEs #307 (EugenMayer)</li> <li>Build spring-boot configuration metadata into jar   #295 #296 (shysteph)</li> <li>add format definition for PowerPoint XML templates   (#259) #270 (stellingsimon)</li> <li>\u2728new document format   xltx #257 (jgoldhammer)</li> </ul>"},{"location":"changelog/#v442-2021-02-10","title":"v4.4.2 (2021-02-10)","text":"<p>Full Changelog</p> <p>Fixed bugs:</p> <ul> <li>DocumentFormat.input family should be optional. #249</li> </ul>"},{"location":"changelog/#v441-2021-02-10","title":"v4.4.1 (2021-02-10)","text":"<p>Full Changelog</p> <p>Fixed bugs:</p> <ul> <li>regression: document-formats with singular extension field are not supported   anymore. #248</li> <li>LocalOfficeManager#afterStartProcessDelay is not validated   properly. #246</li> </ul> <p>Merged pull requests:</p> <ul> <li>bugfix filename contains CJK characters cause error, change to UTF-8   encoding #245 (chunlinyao)</li> </ul>"},{"location":"changelog/#v440-2021-01-15","title":"v4.4.0 (2021-01-15)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Add the ability to wait after an attempt to start an office process before trying to   connect. #244</li> <li>Add dotx conversion out of the box #213</li> <li>Add ability to attach OfficeManager to already running   Process #203</li> <li>JODConverterBean, expose office manager to add filters   support #201</li> <li>Make office process management asynchronous (start, restart,   etc). #200</li> <li>Remove unnecessary dependencies. #198</li> <li>Allow conversions on remote host with LibreOffice directly (   ExternalOfficeManager) #195</li> <li>Use ExternalOfficeManager with a pool of processes #191</li> <li>Allow process restart to be asynchronous #171</li> <li>Add ability to reuse already running libreoffice   instances #72</li> </ul> <p>Fixed bugs:</p> <ul> <li>ExternalOfficeManager :: makeTempDir not called when connectOnStart =   false #211</li> </ul> <p>Closed issues:</p> <ul> <li>ExternalOfficeManager always connects sockets to   127.0.0.1 #241</li> <li>DocUpdateMode not working? #227</li> <li>Depending on the operating system, /tmp is getting regularly   cleaned #220</li> <li>Temporary file name added in CSV -&gt; PDF conversion #219</li> <li>Wiki page for LibreOffice Online example code should be   RemoteOfficeManager #216</li> <li>Wiki page for LibreOffice Online still references \"   jodconverter-online\" #214</li> <li>How to disable AutoCalculate? #207</li> <li>JODConverter Reached limit Tasks and Restart  #196</li> </ul> <p>Merged pull requests:</p> <ul> <li>Make 127.0.0.1 in socket connection   configurable #242 (nikowitt)</li> <li>bugfix ps args truncated at 125   chars #238 (chunlinyao)</li> </ul>"},{"location":"changelog/#v430-2020-03-05","title":"v4.3.0 (2020-03-05)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Rename jodconverter-online module to   jodconverter-remote #190</li> <li>Issues in java11, requiring package names refactoring #178</li> </ul> <p>Fixed bugs:</p> <ul> <li>regression: Upgrade to jodconverter-local 4.2.3 imply to also add a dependency to   jodconverter-core #183</li> <li>Unthrown MalformedInputException when looking for soffice   PID #180</li> </ul>"},{"location":"changelog/#v424-2020-01-16","title":"v4.2.4 (2020-01-16)","text":"<p>Full Changelog</p> <p>Fixed bugs:</p> <ul> <li>regression: Upgrade to jodconverter-local 4.2.3 imply to also add a dependency to   jodconverter-core #183</li> </ul>"},{"location":"changelog/#v423-2020-01-15","title":"v4.2.3 (2020-01-15)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>sample-webapp throws   java.lang.IllegalArgumentException #165</li> <li>Add support for \"XHTML\" LibreOffice filters #134</li> <li>Add all supported extensions to PDF conversion   support. #132</li> <li>Java 11 compatibility #127</li> <li>Add support for \"XHTML\" LibreOffice   filters #135 (linux-warrior)</li> </ul> <p>Fixed bugs:</p> <ul> <li>sample-webapp throws   org.apache.commons.io.FileExistsException #166</li> <li>Errors in tests when building jodconverter 4.2.2 with Java   9+ #159</li> <li>Could not establish connection #148</li> <li>LibreOffice path on FreeBSD is not autodetected #137</li> <li>ExternalOfficeManager creates temporary files in the current   directory #130</li> <li>class ExternalOfficeManager is not Public #121</li> <li>Build fails with JDK10 on macOS #79</li> </ul>"},{"location":"changelog/#v422-2018-11-30","title":"v4.2.2 (2018-11-30)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Create a filter to embed linked images into output   document. #117</li> <li>Fix ExternalOfficeManager can't convert streams #116</li> <li>Filter chain should be reusable without reset #112</li> <li>static JodConverter.convert methods dont work with   ExternalOfficeManagerBuilder() #111</li> </ul> <p>Fixed bugs:</p> <ul> <li>Fix regression introduced by #99. Use AOO libraries.  #113</li> </ul>"},{"location":"changelog/#v421-2018-11-02","title":"v4.2.1 (2018-11-02)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Stop using deprecated command lines options using   LibreOffice #106</li> <li>Redirect office output to jodconverter logs. #105</li> <li>Add support for auto detecting OpenOffice4 path for linux DEB-based   Installation #101</li> <li>Add property for setting ProcessManager explicitly #100</li> <li>Use LibreOffice libraries instead of Apache Open-Office ones by   default #99</li> <li>Add a property to trust all certificate in jodconverter-online   module #98</li> <li>Add properties to the spring-boot-starter allowing document formats   customization. #94</li> <li>Add templateProfileDirOrDefault option to the LocalOfficeManager   builder. #81</li> <li>gradlew is not executable #74</li> <li>Check workingDir for writing #67</li> <li>No way to specify filter parameters with CLI version #63</li> <li>No-args constructor for DocumentFormat does not exist #59</li> <li>Added bean and property for ProcessManager for custom   implementation. #104 (alexey-atiskov)</li> <li>Add Server / Client hint for better   understanding #90 (EugenMayer)</li> <li>Add BMP support #86 (ggsurrel)</li> <li>Supporting more   platforms #85 (damienvdb06)</li> <li>Make <code>gradlew</code> executable (refs   #74) #78 (michelole)</li> <li>remove sourcefile extension   check #65 (aruis)</li> <li>Update LocalOfficeUtils.java,fix Mac OS find   Officehome #64 (aruis)</li> <li>Added JPG, TIFF, and GIF   support #60 (recurve)</li> </ul> <p>Fixed bugs:</p> <ul> <li>Incorrect usage of Validate.notNull method #97</li> </ul>"},{"location":"changelog/#v420-2018-03-01","title":"v4.2.0 (2018-03-01)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Add JodConverter Online to the spring boot starter #56</li> </ul> <p>Closed issues:</p> <ul> <li>Use of Spring 5 with Spring Boot 1.x is unusual #54</li> <li>Wrong scope for <code>spring-boot-configuration-processor</code> #53</li> <li>Consider not adding \"default to\" in property description #52</li> <li>Support for the latest LibreOffice #51</li> </ul>"},{"location":"changelog/#v411-2018-02-16","title":"v4.1.1 (2018-02-16)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Changing Margins when converting .rtf to .pdf #50</li> <li>Send load and store custom FilterOptions when using   jodconverter-online #47</li> <li>When using Input/Output streams, temporary file are created with the tmp   extension. #46</li> <li>Add merging support. #45</li> <li>Add support for Flat XML formats #44</li> <li>Add SSL support for JODConvetrer Online module #35</li> <li>Create a sample application using the jodconverter-spring-boot-starter   module. #34</li> </ul> <p>Fixed bugs:</p> <ul> <li>Online conversion never fill OutputStream nor deletes the temp file when converting to   OutputStream #43</li> </ul> <p>Closed issues:</p> <ul> <li>Merge multiple fodt files and convert to PDF  #42</li> </ul>"},{"location":"credits/","title":"Credits","text":"<p>Here are my favorite/inspiration forks/projects:</p> <ul> <li>documents4j project: Nice choice if you want 100% perfect conversion   using MS Office. But work only on Windows out of the box (Local implementation) and not totally free (since MS Office   is not free). The \"job\" package is strongly inspired by this project.</li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#general-questions","title":"General Questions","text":"What is JODConverter? <p>JODConverter (Java OpenDocument Converter) is a library that converts documents using LibreOffice or OpenOffice.</p> Is JODConverter free to use? <p>Yes. JODConverter is open-source and released under the Apache 2.0 License.</p> When will the next JODConverter version be released? <p>The project is maintained entirely on a voluntary basis in the developer's free time, so unfortunately there are no scheduled release dates.</p>"},{"location":"faq/#installation-setup","title":"Installation &amp; Setup","text":"Do I really need to install OpenOffice.org to use JODConverter? <p>Yes. In fact, JODConverter simply automates OOo operations; all actual conversions are performed by OOo. Trying to use JODConverter without OOo would be like trying to use, say, the MySQL JDBC driver without a MySQL database server. If it can't connect to a server, the driver is useless.</p> Do I really really need to install OpenOffice.org? There's no way to install only a few libraries/DLLs instead? <p>Yes you do really need a complete OOo installation. At most you can omit Base and a few optional component when installing. (Splitting OOo conversion filters into independent components is one of the goals of an OOo sub-project called ODF Toolkit, but don't hold your breath.)</p> How well does it convert format X to format Y? <p>Different people have different requirements/expectations. Why don't you just find out for yourself? Since JODConverter simply automates OOo conversions, you don't even need to install JODConverter to do some tests, you just need OOo. Manually open a document in format X with OOo, and save it as (or export it to) format Y. Voil\u00e0! No tricks, no gimmicks.</p> Is there an option to set X (image quality, layout mode, hidden text, etc)? <p>Guess what? It depends on OOo. Start up Writer, Calc, or Impress, save/export a document in the format you want to convert it to, and see which options OOo provides. Once you've found out which options you want to set you can ask on the discussion how to automate the same operation.</p> Is it possible to execute multiple conversions at a time? <p>By default, JODConverter will start a single office instance, listening for conversion request on port 2002. In order to process more than 1 conversion at the time, you must start multiple office instances.</p> <p>This behavior can be achieved using the portNumbers configuration:</p> <pre><code>// This example will use 4 TCP ports, which will cause\n// JODConverter to start 4 office processes when the\n// OfficeManager will be started.\nOfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .portNumbers(2002, 2003, 2004, 2005)\n        .build();\n</code></pre> <p>The example above shows how to start an office manager that would be able to process 4 conversions at the time. Note that the more office process you start, the more RAM will be consumed by LibreOffice or Apache OpenOffice.</p> How could I set password protection when converting a file to PDF? <p>If you want to set password protection when converting to PDF, you must set 2 filter properties, <code>EncryptFile</code> and <code>DocumentOpenPassword</code>.</p> <p>Here's how this could be done:</p> <pre><code>File inputFile = new File(\"document.doc\");\nFile outputFile = new File(\"document.pdf\");\n\nMap&lt;String, Object&gt; filterData = new HashMap&lt;&gt;();\nfilterData.put(\"EncryptFile\",true);\nfilterData.put(\"DocumentOpenPassword\",\"test\");\n\nMap&lt;String, Object&gt; customProperties = new HashMap&lt;&gt;();\ncustomProperties.put(\"FilterData\",filterData);\n\nLocalConverter\n    .builder()\n    .storeProperties(customProperties)\n    .build()\n    .convert(inputFile)\n    .to(outputFile)\n    .execute();\n</code></pre> <p>OR</p> <pre><code>Map&lt;String, Object&gt; filterData = new HashMap&lt;&gt;();\nfilterData.put(\"EncryptFile\",true);\nfilterData.put(\"DocumentOpenPassword\",\"test\");\n\nDocumentFormat format =\n    DocumentFormat\n        .builder()\n        .from(DefaultDocumentFormatRegistry.PDF)\n        .storeProperty(DocumentFamily.TEXT, \"FilterData\", filterData)\n        .build();\n\nJodConverter\n    .convert(source)\n    .to(target)\n    .as(format)\n    .execute();\n</code></pre> How could I specify the password of a password-protected file (input file) to convert? <p>If you want to be able to convert a password-protected file, you must set the <code>Password</code> load property.</p> <p>Here's how this could be done:</p> <pre><code>final File in = new File(\"path_to_password_protected_file\");\nfinal File out = new File(\"path_to_output_file\");\n\nfinal OfficeManager manager = LocalOfficeManager.builder().startFailFast(true).build();\ntry{\n    manager.start();\n    Map&lt;String, Object&gt; loadProperties = new HashMap&lt;&gt;(LocalConverter.DEFAULT_LOAD_PROPERTIES);\n    loadProperties.put(\"Password\",\"myPassword\");\n\n    LocalConverter\n        .builder()\n        .officeManager(manager)\n        .loadProperties(loadProperties)\n        .build()\n        .convert(in)\n        .to(out)\n        .execute();\n\n} catch(Exception e) {\n    e.printStackTrace();\n} finally {\n    OfficeUtils.stopQuietly(manager);\n}\n</code></pre>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":"When converting from format X to Y, something in the output is not quite right. What happened? <p>As mentioned, JODConverter simply automates OOo conversions. 90% of the problems reported on the JODConverter issues page are actually OOo problems. Please try performing a manual conversion using OOo alone. If you still get the same incorrect result, then it's clearly an OOo issue. (Note that the reverse is not true. If you get different results that doesn't mean it's clearly a JODConverter issue: it may still be an OOo issue that affects only its headless mode.)</p> So if it is an OpenOffice.org issue and not a JODConverter one, where can I ask for more help? <p>The OpenOffice.org Forums is probably the best place to start. If you are sure it is a bug then you can report it as such using the OOo issue tracker.</p> When converting to HTML using the webapp, images are missing. Why is that? <p>HTML is a bit special. Converting to most other formats results in a single output file, but when converting to HTML OOo generates multiple files: one HTML file plus various image files (OOo puts them in the same directory as the HTML one). The sample webapp has no special support for HTML output (in fact its form page doesn't list HTML as an option), it just does what works for other formats i.e. returns a single file: the HTML one. Hence images are lost. The webapp does not even attempt to provide a solution for this problem, because the exact solution depends on your particular requirements. In some cases you may want to package HTML and images into a ZIP file in order to return a single file. In other cases you may want to copy HTML and images to a public path on your web server to access them directly. In all cases you should think about security implications. It's up to you.</p> <p>Whenever OpenOffice.org (OOo for short) is mentioned, this can generally be interpreted to include any office suite derived from OOo such as Apache OpenOffice and LibreOffice.</p>"},{"location":"license/","title":"License","text":"<p>Copyright (\u00a9)</p> <ul> <li>2004 - 2012; Mirko Nasato and contributors  </li> <li>2016 - present; Simon Braconnier and contributors and contributors</li> <li>2022 - present; JODConverter</li> </ul> <p>All rights reserved. https://github.com/jodconverter/jodconverter</p> <p>JODConverter - Java OpenDocument Converter.</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"migration/","title":"Complete Migration Guide","text":""},{"location":"migration/#449-to-4410","title":"4.4.9 to 4.4.10","text":"<p>This only contains bug fix, enhancements and dependency upgrade. It shouldn't have any impact.</p> <p>The major change only concerns the documentation, which has been moved to GitHub pages and built using MkDocs (material).</p>"},{"location":"migration/#448-to-449","title":"4.4.8 to 4.4.9","text":"<p>The disableOpengl option is no longer supported. On recent LibreOffice versions, the option didn't work anymore. To disable OpenGL, you now must use the templateProfileDir option and disable OpenGL by following these suggestions</p>"},{"location":"migration/#447-to-448","title":"4.4.7 to 4.4.8","text":"<p>This only contains bug fix, enhancements and dependency upgrade. It shouldn't have any impact.</p>"},{"location":"migration/#446-to-447","title":"4.4.6 to 4.4.7","text":"<p>This only contains bug fix, enhancements and dependency upgrade. It shouldn't have any impact.</p>"},{"location":"migration/#445-to-446","title":"4.4.5 to 4.4.6","text":"<p>Custom document formats support</p> <p>You can now provide a custom-document-formats.json file as a ressource in your project to customize the document formats supported by jodconverter instead of overwriting the whole document-formats.json. The formats specified in the custom-document-formats.json file will be added to the main registry.</p> <p>Spring Boot 3 support</p> <p>This version of jodconverter can be used with Spring Boot 3.0+</p> <p>New jodconverter-samples repository</p> <p>The jodconverter-samples module has been moved to a dedicated repository. We hope that more examples will be added to this repository over time.</p>"},{"location":"migration/#444-to-445","title":"4.4.4 to 4.4.5","text":"<p>New Local Converter Option</p> <p>There is a new option available when building a <code>LocalConverter</code>, named <code>loadDocumentMode</code>.</p> <pre><code>final File inputFile = File(\"...\")\nfinal File outputFile = File(\"...\")\nfinal OfficeManager manager = ExternalOfficeManager\n        .builder()\n        .connectFailFast(true)\n        .connectOnStart(true)\n        .hostName(\"127.0.0.1\")\n        .portNumbers(8100)\n        .build();\ntry {\n    manager.start();\n    LocalConverter.builder()\n            .officeManager(manager)\n            .loadDocumentMode(LoadDocumentMode.REMOTE)\n            .build()\n            .convert(inputFile)\n            .to(outputFile)\n            .execute();\n} catch (OfficeException e) {\n    e.printStackTrace();\n} finally {\n    OfficeUtils.stopQuietly(manager);\n}\n</code></pre> <p>This new option has been introduced to support conversions using an OOo instance that doesn't share the same drives as the process running JODConverter. When <code>LoadDocumentMode.REMOTE</code> is set, local files will be converted to/from streams when loading and storing a document. This is useful when using an <code>ExternalOfficeManager</code> to connect to an OOo instance running on another server or in a Docker container.</p>"},{"location":"migration/#443-to-444","title":"4.4.3 to 4.4.4","text":"<p>Basic migration with no significant changes.</p>"},{"location":"migration/#442-to-443","title":"4.4.2 to 4.4.3","text":"<p>New WEB document family</p> <p>There is a new document family for better web documents support.</p> <p>See here for more details.</p> <p>Provide builds of both OpenOffice and LibreOffice dependencies in the maven center</p> <p>There is 2 new JODConverter modules published in the maven center allowing you to easily choose whether you want to use the LibreOffice dependencies or the OpenOffice dependencies in your project. Since the gap between LibreOffice and OpenOffice is increasing each year, you may want to rely only on LibreOffice dependencies, wich was not the default.</p> <p>Usage for local conversions using LibreOffice dependencies</p> <p>Gradle: <pre><code>compile 'org.jodconverter:jodconverter-local-lo:4.4.3'\n</code></pre></p> <p>Maven: <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.jodconverter&lt;/groupId&gt;\n  &lt;artifactId&gt;jodconverter-local-lo&lt;/artifactId&gt;\n  &lt;version&gt;4.4.3&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p> <p>Usage for local conversions using OpenOffice dependencies</p> <p>Gradle: <pre><code>compile 'org.jodconverter:jodconverter-local-oo:4.4.3'\n</code></pre> or you can continue to use <pre><code>compile 'org.jodconverter:jodconverter-local:4.4.3'\n</code></pre></p> <p>Maven: <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.jodconverter&lt;/groupId&gt;\n  &lt;artifactId&gt;jodconverter-local-oo&lt;/artifactId&gt;\n  &lt;version&gt;4.4.3&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> or you can continue to use <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.jodconverter&lt;/groupId&gt;\n  &lt;artifactId&gt;jodconverter-local&lt;/artifactId&gt;\n  &lt;version&gt;4.4.3&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p>"},{"location":"migration/#441-to-442","title":"4.4.1 to 4.4.2","text":"<p>This only contains bug fixes. It shouldn't have any impact.</p>"},{"location":"migration/#440-to-441","title":"4.4.0 to 4.4.1","text":"<p>This only contains bug fixes. It shouldn't have any impact.</p>"},{"location":"migration/#430-to-440","title":"4.3.0 to 4.4.0","text":"<p>Asynchronous office processes management</p> <p>To improve the startup time of a server using jodconverter, the office processes management is now asynchronous. Suppose we have an office manager started this way:</p> <pre><code>OfficeManager officeManager =\n    LocalOfficeManager.builder()\n        .portNumbers(2002, 2003, 2004, 2005)\n        .build();\nofficeManager.start();\n</code></pre> <p>Before 4.4.0, the <code>officeManager.start()</code> would wait for all the office processes to be started. Now, the call returns immediately, meaning a faster starting process, and only error logs will be produced if anything goes wrong.</p> <p>To reproduce the behavior from an older version of jodconverter, the <code>startFailFast</code> property must be set to <code>true</code>:</p> <pre><code>OfficeManager officeManager =\n    LocalOfficeManager.builder()\n        .portNumbers(2002, 2003, 2004, 2005)\n        .startFailFast(true)\n        .build();\nofficeManager.start();\n</code></pre> <p>Existing process management (breaking change)</p> <p>The <code>killExistingProcess</code> option has been replaced by the existingProcessAction. If the <code>killExistingProcess</code> was not used, then there is nothing to do; the behavior remains the same. But if <code>killExistingProcess</code> was set to false, you must now set the <code>existingProcessAction</code> to <code>ExistingProcessAction.FAIL</code>.</p>"},{"location":"migration/#424-to-430","title":"4.2.4 to 4.3.0","text":"<p>Package names refactoring</p> <p>All the jodconverter modules have now their own base package name, to fix #178. This means that you'll have to refactor all the imports that cannot be resolved anymore. The best way to do that is to remove the old import and to allow the IDE you are working with to resolve the new import.</p> <p>Example: The class: <code>org.jodconverter.LocalConverter</code> is now <code>org.jodconverter.local.LocalConverter</code></p> <p>Deprecated class removed</p> <ul> <li><code>org.jodconverter.filter.text.PageCounterFilter</code>. Please use <code>org.jodconverter.local.filter.PagesCounterFilter</code></li> <li><code>org.jodconverter.filter.text.PageSelectorFilter</code>. Please use <code>org.jodconverter.local.filter.PagesSelectorFilter</code></li> <li><code>org.jodconverter.office.LocalOfficeUtils#closeQuietly</code>. Please use <code>org.jodconverter.core.office.OfficeUtils#closeQuietly</code></li> </ul> <p>All remote (online) stuff moved from jodconverter-online to jodconverter-remote The jodconverter-online module was a contribution made by the LibreOffice Online team. But the name was confusing since most people thought that this module could be used as a server processing conversion requests. But it is in fact a client that can send conversion requests to a server. Hopefully, this new name will clarify the purpose of the module.</p> <p>Old Maven Setup 4.2.4</p> <pre><code>&lt;dependencies&gt;\n   &lt;dependency&gt;\n      &lt;groupId&gt;org.jodconverter&lt;/groupId&gt;\n      &lt;artifactId&gt;jodconverter-online&lt;/artifactId&gt;\n      &lt;version&gt;4.2.4&lt;/version&gt;\n   &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>New Maven Setup 4.3.0</p> <pre><code>&lt;dependencies&gt;\n   &lt;dependency&gt;\n      &lt;groupId&gt;org.jodconverter&lt;/groupId&gt;\n      &lt;artifactId&gt;jodconverter-remote&lt;/artifactId&gt;\n      &lt;version&gt;4.3.0&lt;/version&gt;\n   &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>Old Gradle Setup 4.2.4</p> <pre><code>compile 'org.jodconverter:jodconverter-online:4.2.4'\n</code></pre> <p>New Gradle Setup 4.3.0</p> <pre><code>compile 'org.jodconverter:jodconverter-remote:4.3.0'\n</code></pre>"},{"location":"migration/#423-to-424","title":"4.2.3 to 4.2.4","text":"<p>This only contains one bug fix. It shouldn't have any impact.</p>"},{"location":"migration/#422-to-423","title":"4.2.2 to 4.2.3","text":"<p>This only contains bug fix, enhancements and dependency upgrade. It shouldn't have any impact.</p>"},{"location":"migration/#421-to-422","title":"4.2.1 to 4.2.2","text":"<p>This only contains bug fix, enhancements and dependency upgrade. It shouldn't have any impact.</p>"},{"location":"migration/#420-to-421","title":"4.2.0 to 4.2.1","text":"<p>This only contains bug fix, enhancements and dependency upgrade.</p> <p>Spring Boot jodconverter-spring-boot-starter 4.2.1 builds on Spring Boot 2.0.6</p>"},{"location":"migration/#411-to-420","title":"4.1.1 to 4.2.0","text":"<p>The LibreOffice Online support was introduce in the 4.1.0 version of JODConverter through the jodconverter-online module, but there was no Spring Boot support for this new module. This was the main goal of the 4.2.0 version of JODConverter. The reason why the version is 4.2.0 and not 4.1.2 is because a jodconverter-spring-boot-starter user will have to change slightly its project configuration.</p> <p>Spring Boot project configuration changes</p> <p>The <code>jodconverter-local</code> and <code>jodconverter-online</code> dependencies has been marked as optional in the <code>jodconverter-spring-boot-starter</code> module. Thus, a user must specify which module(s) he wants to use through dependencies:</p> <p>Old Maven Setup 4.1.1</p> <pre><code>&lt;properties&gt;\n    &lt;jodconverter.version&gt;4.1.1&lt;/jodconverter.version&gt;\n&lt;/properties&gt;\n&lt;dependencies&gt;\n   &lt;dependency&gt;\n      &lt;groupId&gt;org.jodconverter&lt;/groupId&gt;\n      &lt;artifactId&gt;jodconverter-spring-boot-starter&lt;/artifactId&gt;\n      &lt;version&gt;${jodconverter.version}&lt;/version&gt;\n   &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>New Maven Setup 4.2.0</p> <pre><code>&lt;properties&gt;\n    &lt;jodconverter.version&gt;4.2.0&lt;/jodconverter.version&gt;\n&lt;/properties&gt;\n&lt;dependencies&gt;\n   &lt;dependency&gt;\n      &lt;groupId&gt;org.jodconverter&lt;/groupId&gt;\n      &lt;artifactId&gt;jodconverter-local&lt;/artifactId&gt;\n      &lt;version&gt;${jodconverter.version}&lt;/version&gt;\n   &lt;/dependency&gt;\n   &lt;dependency&gt;\n      &lt;groupId&gt;org.jodconverter&lt;/groupId&gt;\n      &lt;artifactId&gt;jodconverter-spring-boot-starter&lt;/artifactId&gt;\n      &lt;version&gt;${jodconverter.version}&lt;/version&gt;\n   &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>Old Gradle Setup 4.1.1 <pre><code>ext {\n    jodconverterVersion = 4.1.1\n}\ncompile \"org.jodconverter:jodconverter-spring-boot-starter:$jodconverterVersion\"\n</code></pre> New Gradle Setup 4.2.0 <pre><code>ext {\n    jodconverterVersion = 4.2.0\n}\ncompile \"org.jodconverter:jodconverter-local:$jodconverterVersion\"\ncompile \"org.jodconverter:jodconverter-spring-boot-starter:$jodconverterVersion\"\n</code></pre></p> <p>Spring Boot JODConverter configuration changes</p> <p>Since the user can now use both the <code>jodconverter-local</code> and <code>jodconverter-online</code> modules in a Spring Boot application, the configurable JODConverter properties prefix has changed. Now there is 2 distincts prefix; <code>jodconverter.local</code> and <code>jodconverter.online</code>.</p> <p>A user migrating from 4.1.1 to 4.2.0 must use <code>jodconverter.local</code> instead of <code>jodconverter</code> only.</p>"},{"location":"migration/#410-to-411","title":"4.1.0 to 4.1.1","text":"<p>The two major changes have been to set the Java baseline to Java 8 and the addition of SSL support for JODConverter online.</p> <p>Move to Java 8 for baseline JODConverter 4.1.1 is built using Java 8 JDK and will require Java 8 JRE at runtime (Java 9 not tested).</p> <p>Using JODConverter Online SSL Support</p> <p>Please read the SSL Support wiki page section to fully understand the SSL Support.</p> <p>4.0.0-RELEASE to 4.1.0</p> <p>Lots of work has been done for 4.1.0. The two major changes have been to create a new fluent API for performing document conversions, and to introduce a new module for LibreOffice Online support. The addition of this new module has had an impact on the project structure and thus, JODConverter users will have to update their dependency to reflect this change.</p> <p>Move to Java 7 for baseline JODConverter 4.1.0 is built using Java 7 JDK and will require Java 7 JRE at runtime (Java 8 also works).</p> <p>All local stuff moved from jodconverter-core to jodconverter-local</p> <p>At first, the support for LibreOffice Online was all developed in the main <code>jodconverter-core</code> project. But I didn't like the fact that it added more (HTTP) dependencies to the project. Even worse, the 4.0.0-RELEASE version of <code>jodconverter-core</code> requires an office installation (LibreOffice/Apache OpenOffice), and LibreOffice Online does not. It would have been pointless to offer an online converter that requires a local OOo installation.</p> <p>So I decided to create 2 new modules that depend on the core module; <code>jodconverter-local</code> and <code>jodconverter-online</code>. All the classes required for local conversions was moved into the local module and all the new classes required for online conversions was moved into the online module. This way, the online module doesn't have all the OOo libraries as dependencies, nor the local module has the http-components libraries as dependencies.</p> <p>Since the <code>jodconverter-core</code> project is now just a dependency of both the new modules, former JODConverter users must now use the <code>jodconverter-local</code> in their project, instead of <code>jodconverter-core</code>:</p> <p>Old Maven Setup 4.0.0-RELEASE</p> <pre><code>&lt;dependencies&gt;\n   &lt;dependency&gt;\n      &lt;groupId&gt;org.jodconverter&lt;/groupId&gt;\n      &lt;artifactId&gt;jodconverter-core&lt;/artifactId&gt;\n      &lt;version&gt;4.0.0-RELEASE&lt;/version&gt;\n   &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>New Maven Setup 4.1.0</p> <pre><code>&lt;dependencies&gt;\n   &lt;dependency&gt;\n      &lt;groupId&gt;org.jodconverter&lt;/groupId&gt;\n      &lt;artifactId&gt;jodconverter-local&lt;/artifactId&gt;\n      &lt;version&gt;4.1.0&lt;/version&gt;\n   &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>Old Gradle Setup 4.0.0-RELEASE</p> <pre><code>compile 'org.jodconverter:jodconverter-core:4.0.0-RELEASE'\n</code></pre> <p>New Gradle Setup 4.1.0</p> <pre><code>compile 'org.jodconverter:jodconverter-local:4.1.0'\n</code></pre> <p>Using the new API Even if the 4.1.0 version is backward compatible (just changing maven dependency from jodconverter-core to jodconverter-local is enough), JODConverter users are encouraged to use the new API since the classes <code>DefaultOfficeManagerBuilder</code> and <code>OfficeDocumentConverter</code> are now deprecated.</p> <p>Please read the Usage as a Java Library wiki page to fully understand the new API.</p> <p>Here is a conversion example using the 4.0.0-RELEASE version:</p> <pre><code>File source = new File(...);\nFile dest = new File(...);\n\nOfficeManager officeManager = null;\ntry {\n  officeManager = new DefaultOfficeManagerBuilder()\n    .setPortNumbers(2002, 2003)\n    .setTaskExecutionTimeout(60000)\n    .setOfficeHome(new File(\"office path\"))\n    .build();\n  officeManager.start();\n\n  OfficeDocumentConverter converter\n    = new OfficeDocumentConverter(officeManager);\n  converter.convert(source, dest);\n\n} finally  {\n  if (officeManager != null) {\n    try {\n      officeManager.stop();\n    } catch (OfficeException ex) {\n      // Log the error...\n    }\n  }\n}\n</code></pre> <p>And here is the exact same example, using the new 4.1.0 version:</p> <pre><code>File source = new File(...);\nFile dest = new File(...);\n\nOfficeManager officeManager = null;\ntry {\n  officeManager = LocalOfficeManager.builder()\n    .portNumbers(2002, 2003)\n    .taskExecutionTimeout(60000)\n    .officeHome(\"office path\")\n    .build();\n  officeManager.start();\n\n  LocalConverter.make(officeManager)\n    .convert(source)\n    .to(dest)\n    .execute();\n\n} finally  {\n  if (officeManager != null) {\n    try {\n      officeManager.stop();\n    } catch (OfficeException ex) {\n      // Log the error...\n    }\n  }\n}\n</code></pre> <p>Note that in a WEB application context where an office manager is created and started once when the application starts, the office manager can now be installed, and thus it is no longer required to specify which manager is used when converting a document:</p> <pre><code>// On application start\nOfficeManager officeManager = LocalOfficeManager.builder()\n  .portNumbers(2002, 2003)\n  .taskExecutionTimeout(60000)\n  .officeHome(\"office path\")\n  .install()\n  .build();\nofficeManager.start();\n\n...\n\n// On document conversion\nFile source = new File(...);\nFile dest = new File(...);\n\nLocalConverter.make()\n  .convert(source)\n  .to(dest)\n  .execute();\n\n// Or the shortcut:\nJodConverter\n  .convert(source)\n  .to(dest)\n  .execute();\n</code></pre>"},{"location":"support/","title":"\ud83d\udc96 Support JODConverter","text":"<p>Maintaining JODConverter takes time, care, and dedication. If this project has helped you save development hours, simplify document conversion, or power your production systems\u2014consider supporting its continued development.</p>"},{"location":"support/#why-donate","title":"Why Donate?","text":"<p>JODConverter is used by developers and companies around the world to:</p> <ul> <li>Convert documents between formats (DOCX, PDF, ODT, XLSX, etc.)</li> <li>Automate LibreOffice and OpenOffice tasks</li> <li>Build robust document services in Java and Spring Boot</li> </ul> <p>Your donation helps:</p> <ul> <li>Keep the project actively maintained</li> <li>Fix bugs and improve compatibility</li> <li>Add new features</li> <li>Cover tooling costs</li> </ul> <p>Even a small contribution makes a big difference.</p>"},{"location":"support/#how-to-donate","title":"\u2615 How to Donate","text":"<p>You can support the project through:</p> <ul> <li>PayPal</li> </ul> <p>\ud83d\udcac \u201cIf you rely on JODConverter, please consider giving back.\u201d</p>"},{"location":"support/#other-ways-to-help","title":"\ud83d\udee0\ufe0f Other Ways to Help","text":"<p>If you can\u2019t donate financially, here are other ways to support:</p> <ul> <li>\u2b50 Star the repo</li> <li>\ud83d\udc1b Report bugs or suggest features</li> <li>\ud83d\udce3 Share the project with others</li> <li>\ud83d\udce6 Contribute code or documentation</li> </ul> <p>Thank you for being part of the JODConverter community. Your support keeps the project alive and thriving.</p>"},{"location":"configuration/external-configuration/","title":"ExternalOfficeManager Configuration","text":"<p>The ExternalOfficeManager is the manager to use when you want to connect to an already started office process that is not managed by JODConverter.</p> <p>A <code>ExternalOfficeManager</code> is built using a builder:</p> <pre><code>OfficeManager officeManager = ExternalOfficeManager.builder().build();\n</code></pre> <p>Here are all the properties you can set through the builder:</p> <p>Note</p> <p>JODConverter uses milliseconds for all time values.</p>"},{"location":"configuration/external-configuration/#workingdir","title":"\ud83d\udcc1<code>workingDir</code>","text":"<p>This property is used to create a temporary directory where files will be created when conversions are done using InputStream/OutputStream.</p> <p> Default: The system temporary directory as specified by the <code>java.io.tmpdir</code> system property.</p> <p>NOTE that some OS automatically clean up the <code>java.io.tmpdir</code> directory periodically. It is recommended to check your OS to see if you have to set this property to a directory that won't be deleted.</p> <pre><code>OfficeManager officeManager =\n    ExternalOfficeManager\n        .builder()\n        .workingDir(\"C:\\\\jodconverter\\\\tmp\")\n        .build();\n</code></pre>"},{"location":"configuration/external-configuration/#hostname","title":"\ud83d\udd20<code>hostName</code>","text":"<p>This property sets the host name that will be used in the <code>--accept</code> argument when connecting to an office process.</p> <p> Default: 127.0.0.1</p> <pre><code>OfficeManager officeManager =\n    ExternalOfficeManager\n        .builder()\n        .hostName(\"localhost\")\n        .build();\n</code></pre>"},{"location":"configuration/external-configuration/#portnumbers-pipenames-websocketurls","title":"\ud83d\udd22<code>portNumbers</code> / \ud83d\udd20<code>pipeNames</code> / \ud83d\udd20<code>websocketUrls</code>","text":"<p>This property sets the port number(s), pipe name(s) and websocket urls that will be used in the <code>--accept</code> argument when connecting to an office process.</p> <p>If you want to know more about web socket, read the Pull Request where it has been introduced.</p> <p> Default: TCP socket, on port 2002.</p> Java <pre><code>// This example will use 4 TCP ports and 4 pipes, which will\n// cause JODConverter to connect to 8 office processes (a bit excessive!)\n// when the OfficeManager will be started.\nOfficeManager officeManager =\n    ExternalOfficeManager\n        .builder()\n        .portNumbers(2002, 2003, 2004, 2005)\n        .pipeNames(\"Pipe1\", \"Pipe2\", \"Pipe3\", \"Pipe4\")\n        .build();\n</code></pre>"},{"location":"configuration/external-configuration/#connectonstart","title":"\u274e<code>connectOnStart</code>","text":"<p>This property controls whether a connection must be attempted when the manager starts. If <code>false</code>, a connection will only be attempted the first time a conversion task is executed.</p> <p> Default: true.</p> <pre><code>OfficeManager officeManager =\n    ExternalOfficeManager\n        .builder()\n        .connectOnStart(false)\n        .build();\n</code></pre>"},{"location":"configuration/external-configuration/#connecttimeout","title":"\u231a<code>connectTimeout</code>","text":"<p>This property sets the timeout, in milliseconds, after which a connection attempt will fail.</p> <p> Default: 120000 (2 minutes)</p> <pre><code>OfficeManager officeManager =\n    ExternalOfficeManager\n        .builder()\n        .connectTimeout(60000)\n        .build();\n</code></pre>"},{"location":"configuration/external-configuration/#connectretryinterval","title":"\u231a<code>connectRetryInterval</code>","text":"<p>This property sets the delay, in milliseconds, between each try when trying to connect to the external OOo process.</p> <p> Default: 250 (0.25 seconds)</p> <pre><code>OfficeManager officeManager =\n    ExternalOfficeManager\n        .builder()\n        .connectRetryInterval(1000)\n        .build();\n</code></pre>"},{"location":"configuration/external-configuration/#connectfailfast","title":"\u274e<code>connectFailFast</code>","text":"<p>This property controls whether the manager will \"fail fast\" if the connection to the external process fails. If set to <code>true</code>, a connection attempt will wait for the task to be completed, and will throw an exception the connection to the external process fails. If set to <code>false</code>, the task of connecting to the external process will be submitted and will return immediately, meaning a faster starting process. Only error logs will be produced if anything goes wrong.</p> <p> Default: false.</p> <pre><code>OfficeManager officeManager =\n    ExternalOfficeManager\n        .builder()\n        .connectFailFast(true)\n        .build();\n</code></pre>"},{"location":"configuration/external-configuration/#maxtasksperconnection","title":"\ud83d\udd22<code>maxTasksPerConnection</code>","text":"<p>This property sets the maximum number of tasks an office process can execute before reconnecting to it. 0 means an infinite number of tasks (will never reconnect).</p> <p> Default: 1000</p> <pre><code>OfficeManager officeManager =\n    ExternalOfficeManager\n        .builder()\n        .maxTasksPerConnection(500)\n        .build();\n</code></pre>"},{"location":"configuration/external-configuration/#taskqueuetimeout","title":"\u231a<code>taskQueueTimeout</code>","text":"<p>This property is used to set the maximum living time of a task in the conversion queue. The task will be removed from the queue if the waiting time is longer than this timeout and an <code>OfficeException</code> will be thrown.</p> <p> Default: 30000 (30 seconds)</p> <pre><code>OfficeManager officeManager =\n    ExternalOfficeManager\n        .builder()\n        .taskQueueTimeout(60000)\n        .build();\n</code></pre>"},{"location":"configuration/external-configuration/#taskexecutiontimeout","title":"\u231a<code>taskExecutionTimeout</code>","text":"<p>This property sets the maximum time allowed to process a task. If the processing time of a task is longer than this timeout, this task will be aborted and the next task is processed.</p> <p> Default: 120000 (2 minutes)</p> <pre><code>OfficeManager officeManager =\n    ExternalOfficeManager\n        .builder()\n        .taskExecutionTimeout(60000)\n        .build();\n</code></pre> <p>Whenever OpenOffice.org (OOo for short) is mentioned, this can generally be interpreted to include any office suite derived from OOo such as Apache OpenOffice and LibreOffice.</p>"},{"location":"configuration/local-configuration/","title":"LocalOfficeManager Configuration","text":"<p>The LocalOfficeManager is the most common office manager used by the JODConverter users. It is the manager you must use when the OOo installation lives on the same server as your application, hence the <code>Local</code> prefix.</p> <p>When using a <code>LocalOfficeManager</code>, there are a number of settings that can be configured. Some of the default settings used by JODConverter have been chosen because they have a greater chance of working out of the box, but they are not necessarily the optimal ones.</p> <p>A <code>LocalOfficeManager</code> is built using a builder:</p> <pre><code>OfficeManager officeManager = LocalOfficeManager.builder().build();\n</code></pre> <p>Here are all the properties you can set through the builder:</p> <p>Note</p> <p>JODConverter uses milliseconds for all time values.</p>"},{"location":"configuration/local-configuration/#officehome","title":"\ud83d\udcc1<code>officeHome</code>","text":"<p>This property sets the office home directory of the office installation that will be used to perform document conversions.</p> <p> Default: Auto-detected, starting with LibreOffice (over OpenOffice) and the most recent version.</p> JavaSpring BootCommand Line <pre><code>// This example will force JODConverter to use the OpenOffice 4\n// installation that can be found using the specified path.\nOfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .officeHome(\"C:\\\\Program Files (x86)\\\\OpenOffice 4\")\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  local:\n    office-home: C:/Program Files (x86)/OpenOffice 4\n</code></pre> application.properties<pre><code>jodconverter.local.office-home = C:/Program Files (x86)/OpenOffice 4\n</code></pre> <p>short option<pre><code>jodconverter-cli -i \"C:/Program Files (x86)/OpenOffice 4\" infile outfile\n</code></pre> or long option<pre><code>jodconverter-cli --office-home \"C:/Program Files (x86)/OpenOffice 4\" infile outfile\n</code></pre></p>"},{"location":"configuration/local-configuration/#workingdir","title":"\ud83d\udcc1<code>workingDir</code>","text":"<p>This property sets the directory where temporary office profile directories will be created. An office profile directory is created per office process launched. This property will also be used to create a temporary directory where files will be created when conversions are done using InputStream/OutputStream.</p> <p> Default: The system temporary directory as specified by the <code>java.io.tmpdir</code> system property.</p> <p>NOTE that some OS automatically clean up the <code>java.io.tmpdir</code> directory periodically. It is recommended to check your OS to see if you have to set this property to a directory that won't be deleted.</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .workingDir(\"C:\\\\jodconverter\\\\tmp\")\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  local:\n    working-dir: \"C:/jodconverter/tmp\"\n</code></pre> application.properties<pre><code>jodconverter.local.working-dir = \"C:/jodconverter/tmp\"\n</code></pre> <p>short option<pre><code>jodconverter-cli -w \"C:/jodconverter/tmp\" infile outfile\n</code></pre> or long option<pre><code>jodconverter-cli --working-dir \"C:/jodconverter/tmp\" infile outfile\n</code></pre></p>"},{"location":"configuration/local-configuration/#templateprofiledir","title":"\ud83d\udcc1<code>templateProfileDir</code>","text":"<p>A <code>LocalOfficeManager</code> creates temporary profile directories for its OOo processes, to avoid interfering with e.g., another OOo instance being used by the user. Using this property, you can provide a template profile directory containing customized settings. The <code>OfficeManager</code> will copy such a template directory to the temporary profile, so OOo will use the same settings while still keeping the OOo instances separate.</p> <p>A profile can be customized in OOo by selecting the Tools &gt; Options menu item. Settings that may be worth customizing for automated conversions include e.g.</p> <ul> <li>Load/Save &gt; General: you may e.g., want to disable \"Save URLs relative to Internet\" for security reasons.</li> <li>Load/Save &gt; Microsoft Office: these options affect conversions of embedded documents, e.g., an Excel table contained   in a Word document. If not enabled, the embedded table will likely be lost when converting the Word document to   another format.</li> </ul> <p> Default: By default, this temporary profile will be a new one, created by OOo with its own default settings, and relies on the -nofirststartwizard command line option.</p> <p>Note</p> <p>The <code>-nofirststartwizard</code> switch is ignored by LibreOffice, see the Command Line Parameters documentation.</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .workingDir(\"C:\\\\jodconverter\\\\templateProfileDir\")\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  local:\n    working-dir: \"C:/jodconverter/templateProfileDir\"\n</code></pre> application.properties<pre><code>jodconverter.local.working-dir = \"C:/jodconverter/templateProfileDir\"\n</code></pre> <p>short option<pre><code>jodconverter-cli -w C:\\jodconverter\\templateProfileDir infile outfile\n</code></pre> or long option<pre><code>jodconverter-cli --working-dir C:\\jodconverter\\templateProfileDir infile outfile\n</code></pre></p>"},{"location":"configuration/local-configuration/#hostname","title":"\ud83d\udd20<code>hostName</code>","text":"<p>This property sets the host name that will be used in the <code>--accept</code> argument when starting an office process. Most of the time, the default will work. But if it doesn't work (unable to connect to the started process), using <code>localhost</code> instead of the default value may work.</p> <p> Default: 127.0.0.1</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .hostName(\"localhost\")\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  local:\n    host-name: localhost\n</code></pre> application.properties<pre><code>jodconverter.local.host-name = localhost\n</code></pre> <p>short option<pre><code>jodconverter-cli -n localhost infile outfile\n</code></pre> or long option<pre><code>jodconverter-cli --host-name localhost infile outfile\n</code></pre></p>"},{"location":"configuration/local-configuration/#portnumbers-pipenames","title":"\ud83d\udd22<code>portNumbers</code> / \ud83d\udd20<code>pipeNames</code>","text":"<p>OOo inter-process communication can use either TCP sockets and/or named pipes. Named pipes have the advantage of not taking up TCP ports (with their potential security implications), and they are marginally faster. However, they require a native library to be loaded by the JVM, and this means having to set the <code>java.library.path</code> system property. That's why it's not the default. The path that needs to be added to <code>java.library.path</code> is different depending on the platform, but it should be the directory in the OOo installation containing libjpipe (or jpipe.dll).</p> <ul> <li>On Linux it's e.g.: java -Djava.library.path=/opt/openoffice.org/ure/lib</li> <li>On Windows it's e.g.: java \"-Djava.library.path=C:\\Program Files (x86)\\OpenOffice 4\\program\"</li> </ul> <p> Default: TCP socket, on port 2002.</p> JavaSpring BootCommand Line <pre><code>// This example will use 4 TCP ports and 4 pipes, which will\n// cause JODConverter to start 8 office processes (a bit excessive!)\n// when the OfficeManager will be started.\nOfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .portNumbers(2002, 2003, 2004, 2005)\n        .pipeNames(\"Pipe1\", \"Pipe2\", \"Pipe3\", \"Pipe4\")\n        .build();\n</code></pre> <p>Note</p> <p><code>pipeNames</code> can't be used with Spring Boot for now.</p> application.yml<pre><code>jodconverter:\n  local:\n    port-numbers: 2002, 2003, 2004, 2005\n</code></pre> application.properties<pre><code>jodconverter.local.port-numbers = 2002, 2003, 2004, 2005\n</code></pre> <p>Note</p> <p><code>pipeNames</code> can't be used with the command line tool, and only 1 port can be configured.</p> <p>short option<pre><code>jodconverter-cli -p 2003 infile outfile\n</code></pre> or long option<pre><code>jodconverter-cli --port 2003 infile outfile\n</code></pre></p>"},{"location":"configuration/local-configuration/#processmanager","title":"\ud83d\udd20<code>processManager</code>","text":"<p>A process manager is used when JODConverter needs to deal with a started office process. When JODConverter starts an office process, it must retrieve the PID of the started process to be able to kill it later if required.</p> <p> Default: By default, JODConverter will try to find the best process manager according to the OS on which JODConverter is running. But any process manager implementing the <code>ProcessManager</code> interface can be used if found on the classpath.</p> JavaSpring BootCommand Line <pre><code>// This example will create an instance of the com.example.foo.CustomProcessManager\n// class that will be used by the created OfficeManager.\nOfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .processManager(\"com.example.foo.CustomProcessManager\")\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  local:\n    process-manager-class: com.example.foo.CustomProcessManager\n</code></pre> application.properties<pre><code>jodconverter.local.process-manager-class = com.example.foo.CustomProcessManager\n</code></pre> <p>short option<pre><code>jodconverter-cli -m com.example.foo.CustomProcessManager infile outfile\n</code></pre> or long option<pre><code>jodconverter-cli --process-manager com.example.foo.CustomProcessManager infile outfile\n</code></pre></p>"},{"location":"configuration/local-configuration/#runasargs","title":"\ud83d\udd20<code>runAsArgs</code>","text":"<p>This property specifies the sudo arguments that will be used with unix commands when JODConverter chooses a unix process manager.</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .runAsArgs(\"sudo\")\n        .build();\n</code></pre> <p><code>runAsArgs</code> can't be set with the Spring Boot module.</p> <p><code>runAsArgs</code> can't be set with the command line tool.</p>"},{"location":"configuration/local-configuration/#processtimeout","title":"\u231a<code>processTimeout</code>","text":"<p>This property sets the timeout, in milliseconds, when trying to execute an office process call (start/terminate).</p> <p> Default: 120000 (2 minutes)</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .processTimeout(60000)\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  local:\n    process-timeout: 60000\n</code></pre> application.properties<pre><code>jodconverter.local.process-timeout = 60000\n</code></pre> <p><code>processTimeout</code> can't be set with the command line tool, it will always be 120000.</p>"},{"location":"configuration/local-configuration/#processretryinterval","title":"\u231a<code>processRetryInterval</code>","text":"<p>This property sets the delay, in milliseconds, between each try when trying to execute an office process call ( start/terminate).</p> <p> Default: 250 (0.25 seconds)</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .processRetryInterval(1000)\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  local:\n    process-retry-interval: 1000\n</code></pre> application.properties<pre><code>jodconverter.local.process-retry-interval = 1000\n</code></pre> <p><code>processRetryInterval</code> can't be set with the command line tool, it will always be 250.</p>"},{"location":"configuration/local-configuration/#afterstartprocessdelay","title":"\u231a<code>afterStartProcessDelay</code>","text":"<p>This property specifies the delay, in milliseconds, after an attempt to start an office process before doing anything else. It is required on some OS to avoid an attempt to connect to the started process that will hang for more than 5 minutes before throwing a timeout exception, we do not know why.</p> <p> Default: 0 (no delay). On FreeBSD, which is a known OS needing this, it defaults to 2000 (2 seconds).</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .afterStartProcessDelay(5000)\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  local:\n    after-start-process-delay: 5000\n</code></pre> application.properties<pre><code>jodconverter.local.after-start-process-delay = 5000\n</code></pre> <p><code>afterStartProcessDelay</code> can't be set with the command line tool, it will always be 0.</p>"},{"location":"configuration/local-configuration/#existingprocessaction","title":"\ud83d\udd20<code>existingProcessAction</code>","text":"<p>This property specifies the action that must be taken when trying to start an office process with a connection string and that there already is a process running with the same connection string. Available options are:</p> <ul> <li>FAIL: Indicates that the office manager must fail when trying to start an office process and there already is a   process running with the same connection string. If that is the case, an exception is thrown.</li> <li>KILL: Indicates that the manager must kill the existing office process when starting a new office process, and   there already is a process running with the same connection string.</li> <li>CONNECT: Indicates that the manager must connect to the existing office process when starting a new office   process, and there already is a process running with the same connection string.</li> <li>CONNECT_OR_KILL: Indicates that the manager must first try to connect to the existing office process when starting   a new office process, and there already is a process running with the same connection string. If the connection fails,   then the manager must kill the existing office process.</li> </ul> <p> Default: ExistingProcessAction.KILL.</p> <p>See here to understand why such a property exists and to learn more about a use case where this properly is useful.</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .existingProcessAction(ExistingProcessAction.CONNECT_OR_KILL)\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  local:\n    existing-process-action: connect_or_kill\n</code></pre> application.properties<pre><code>jodconverter.local.existing-process-action = onnect_or_kill\n</code></pre> <p>short option<pre><code>jodconverter-cli -x connect_or_kill infile outfile\n</code></pre> or long option<pre><code>jodconverter-cli --existing-process-action connect_or_kill infile outfile\n</code></pre></p>"},{"location":"configuration/local-configuration/#keepaliveonshutdown","title":"\u274e<code>keepAliveOnShutdown</code>","text":"<p>This property controls whether the manager will keep the office process alive on shutdown. If set to <code>true</code>, the stop task will only disconnect from the office process, which will stay alive. If set to <code>false</code>, the office process will be stopped gracefully (or killed if it could not be stopped gracefully).</p> <p>See here to understand why such a property exists and to learn more about a use case where this properly is useful.</p> <p> Default: false.</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .keepAliveOnShutdown(true)\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  local:\n    keep-alive-on-shutdown: true\n</code></pre> application.properties<pre><code>jodconverter.local.keep-alive-on-shutdown = true\n</code></pre> <p>short option<pre><code>jodconverter-cli -k outfile\n</code></pre> or long option<pre><code>jodconverter-cli --keep-alive-on-shutdown infile outfile\n</code></pre></p>"},{"location":"configuration/local-configuration/#startfailfast","title":"\u274e<code>startFailFast</code>","text":"<p>This property controls whether the manager will \"fail fast\" if an office process cannot be started or the connection to the started process fails. If set to <code>true</code>, the start of a process will wait for the task to be completed, and will throw an exception if the office process is not started successfully or if the connection to the started process fails. If set to <code>false</code>, the task of starting the process and connecting to it will be submitted and will return immediately, meaning a faster starting process. Only error logs will be produced if anything goes wrong.</p> <p> Default: false.</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .startFailFast(true)\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  local:\n    start-fail-fast: true\n</code></pre> application.properties<pre><code>jodconverter.local.start-fail-fast = true\n</code></pre> <p><code>startFailFast</code> can't be set with the command line tool, it will always be false. It would not be possible to support this option with the command line tool.</p>"},{"location":"configuration/local-configuration/#maxtasksperprocess","title":"\ud83d\udd22<code>maxTasksPerProcess</code>","text":"<p>This property sets the maximum number of tasks an office process can execute before restarting. 0 means an infinite number of tasks (will never restart). It is not recommended to set this property to 0 since some OOo installation is known to have memory leaks when converting documents.</p> <p> Default: 200</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .maxTasksPerProcess(50)\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  local:\n    max-tasks-per-process: 50\n</code></pre> application.properties<pre><code>jodconverter.local.max-tasks-per-process = 50\n</code></pre> <p><code>maxTasksPerProcess</code> can't be set with the command line tool, it will always be 200.</p>"},{"location":"configuration/local-configuration/#taskqueuetimeout","title":"\u231a<code>taskQueueTimeout</code>","text":"<p>This property is used to set the maximum living time of a task in the conversion queue. The task will be removed from the queue if the waiting time is longer than this timeout and an <code>OfficeException</code> will be thrown.</p> <p> Default: 30000 (30 seconds)</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .taskQueueTimeout(60000)\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  local:\n    task-queue-timeout: 60000\n</code></pre> application.properties<pre><code>jodconverter.local.task-queue-timeout = 60000\n</code></pre> <p><code>taskQueueTimeout</code> can't be set with the command line tool, it will always be 30000.</p>"},{"location":"configuration/local-configuration/#taskexecutiontimeout","title":"\u231a<code>taskExecutionTimeout</code>","text":"<p>This property sets the maximum time allowed to process a task. If the processing time of a task is longer than this timeout, this task will be aborted and the next task is processed.</p> <p> Default: 120000 (2 minutes)</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    LocalOfficeManager\n        .builder()\n        .taskExecutionTimeout(60000)\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  local:\n    task-execution-timeout: 60000\n</code></pre> application.properties<pre><code>jodconverter.local.task-execution-timeout = 60000\n</code></pre> <p>short option<pre><code>jodconverter-cli -t 60000 infile outfile\n</code></pre> or long option<pre><code>jodconverter-cli --timeout 60000 infile outfile\n</code></pre></p> <p>Whenever OpenOffice.org (OOo for short) is mentioned, this can generally be interpreted to include any office suite derived from OOo such as Apache OpenOffice and LibreOffice.</p>"},{"location":"configuration/remote-configuration/","title":"RemoteOfficeManager Configuration","text":"<p>The RemoteOfficeManager is the manager to use when you want to send conversion requests to a server supporting document conversions through a REST API (like Collabora Online) and want to use the familiar JODConverter API in your applications.</p> <p>A <code>RemoteOfficeManager</code> is built using a builder:</p> <pre><code>OfficeManager officeManager = RemoteOfficeManager.builder().urlConnection(\"http://path/to/myLibreOfficeOnlineServer\").build();\n</code></pre> <p>Here are all the properties you can set through the builder:</p> <p>Note</p> <p>JODConverter uses milliseconds for all time values.</p>"},{"location":"configuration/remote-configuration/#poolsize","title":"\u231a<code>poolSize</code>","text":"<p>This property sets the size of the pool. Setting this property controls how many conversions can be done concurrently. </p> <p> Default: 1</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    RemoteOfficeManager\n        .builder()\n        .poolSize(1)\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  remote:\n    pool-size: 1\n</code></pre> application.properties<pre><code>jodconverter.remote.pool-size = 1\n</code></pre> <p><code>poolSize</code> can't be set with the command line tool, it will always be 1.</p>"},{"location":"configuration/remote-configuration/#workingdir","title":"\ud83d\udcc1<code>workingDir</code>","text":"<p>This property is used to create a temporary directory where files will be created when conversions are done using InputStream/OutputStream.</p> <p> Default: The system temporary directory as specified by the <code>java.io.tmpdir</code> system property.</p> <p>NOTE that some OS automatically clean up the <code>java.io.tmpdir</code> directory periodically. It is recommended to check your OS to see if you have to set this property to a directory that won't be deleted.</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    RemoteOfficeManager\n        .builder()\n        .workingDir(\"C:\\\\jodconverter\\\\tmp\")\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  remote:\n    working-dir: \"C:/jodconverter/tmp\"\n</code></pre> application.properties<pre><code>jodconverter.remote.working-dir = \"C:/jodconverter/tmp\"\n</code></pre> <p>short option<pre><code>jodconverter-cli -c \"https://localhost:8001\" -w \"C:/jodconverter/tmp\" timeout infile outfile\n</code></pre> or long option<pre><code>jodconverter-cli --connection-url \"https://localhost:8001\" --wirking-dir \"C:/jodconverter/tmp\" timeout infile outfile\n</code></pre></p>"},{"location":"configuration/remote-configuration/#urlconnection","title":"\ud83d\udcc1<code>urlConnection</code>","text":"<p>This property sets the URL of the remote server.</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    RemoteOfficeManager\n        .builder()\n        .urlConnection(\"https://localhost:8001\")\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  remote:\n    url: \"https://localhost:8001\"\n</code></pre> application.properties<pre><code>jodconverter.remote.url = \"https://localhost:8001\"\n</code></pre> <p>short option<pre><code>jodconverter-cli -c \"https://localhost:8001\" infile outfile\n</code></pre> or long option<pre><code>jodconverter-cli --connection-url \"https://localhost:8001\" infile outfile\n</code></pre></p>"},{"location":"configuration/remote-configuration/#connecttimeout","title":"\u231a<code>connectTimeout</code>","text":"<p>This property sets the timeout in milliseconds until a connection is established. A timeout value of zero is interpreted as an infinite timeout. A negative value is interpreted as undefined (system default).</p> <p> Default: 60000 (1 minute)</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    RemoteOfficeManager\n        .builder()\n        .connectTimeout(120000)\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  remote:\n    connect-timeout: 120000\n</code></pre> application.properties<pre><code>jodconverter.remote.connect-timeout = 120000\n</code></pre> <p><code>connectTimeout</code> can't be set with the command line tool, it will always be 60000.</p>"},{"location":"configuration/remote-configuration/#sockettimeout","title":"\u231a<code>socketTimeout</code>","text":"<p>This property sets the socket timeout <code>SO_TIMEOUT</code> in milliseconds, which is the timeout for waiting for data or, to put differently, a maximum period inactivity between two consecutive data packets. A timeout value of zero is interpreted as an infinite timeout. A negative value is interpreted as undefined (system default).</p> <p> Default: 120000 (2 minutes)</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n        RemoteOfficeManager\n                .builder()\n                .socketTimeout(60000)\n                .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  remote:\n    socket-timeout: 60000\n</code></pre> application.properties<pre><code>jodconverter.remote.socket-timeout = 60000\n</code></pre> <p><code>socketTimeout</code> can't be set with the command line tool, it will always be 120000.</p>"},{"location":"configuration/remote-configuration/#sslconfig","title":"\ud83d\udd12<code>sslConfig</code>","text":"<p>This property controls the SSL configuration to secure communication with the remote server</p> JavaSpring BootCommand Line <pre><code>final SslConfig sslConfig = new SslConfig();\nsslConfig.setEnabled(true);\nsslConfig.setTrustStore(\"Path to the TrustStore\");\nsslConfig.setTrustStorePassword(\"Password of the TrustStore\");\n\nOfficeManager officeManager =\n    RemoteOfficeManager\n        .builder()\n        .sslConfig(sslConfig)\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  remote:\n    ssl:\n      enabled: true\n      ciphers: TLS_RSA_WITH_AES_128_CBC_SHA\n      enabled-protocols: TLSv1.1, TLSv1.2\n      key-alias: clientkeypair\n      key-password: clientkeystore\n      key-store: classpath:clientkeystore.jks\n      key-store-password: clientkeystore\n      key-store-type: jks\n      key-store-provider: SUN\n      trust-store: classpath:clienttruststore.jks\n      trust-store-password: clienttruststore\n      trust-store-type: jks\n      trust-store-provider: SUN\n      protocol: TLS\n      verify-hostname: true\n</code></pre> application.properties<pre><code>jodconverter.remote.ssl.enabled = true\njodconverter.remote.ssl.ciphers = TLS_RSA_WITH_AES_128_CBC_SHA\njodconverter.remote.ssl.enabled-protocols = TLSv1.1, TLSv1.2\njodconverter.remote.ssl.key-alias = clientkeypair\njodconverter.remote.ssl.key-password = clientkeystore\njodconverter.remote.ssl.key-store = classpath:clientkeystore.jks\njodconverter.remote.ssl.key-store-password = clientkeystore\njodconverter.remote.ssl.key-store-type = jks\njodconverter.remote.ssl.key-store-provider = SUN\njodconverter.remote.ssl.trust-store = classpath:clienttruststore.jks\njodconverter.remote.ssl.trust-store-password = clienttruststore\njodconverter.remote.ssl.trust-store-type = jks\njodconverter.remote.ssl.trust-store-provider = SUN\njodconverter.remote.ssl.protocol = TLS\njodconverter.remote.ssl.verify-hostname = true\n</code></pre> <p>When JODConverter remote is used as a Command Line Tool, you must provide the SSL configuration through an application context configuration file, which is the <code>-a</code> or <code>--application-context</code>. Here's an example of an SSL configuration file.</p> ssl.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\n\n    &lt;!-- Configure the SSL to secure communication with a Libre Office Online server. --&gt;\n    &lt;bean class=\"org.jodconverter.ssl.SslConfig\"&gt;\n        &lt;!-- Indicates whether SSL support is enabled or not. --&gt;\n        &lt;property name=\"enabled\" value=\"true\"/&gt;\n        &lt;!-- Comma separated values of the supported SSL ciphers. Defaults to the JVM default values. --&gt;\n        &lt;property name=\"ciphers\" value=\"ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\"/&gt;\n        &lt;!-- Comma separated values of the enabled SSL protocols. Defaults to the JVM default values. --&gt;\n        &lt;property name=\"enabledProtocols\" value=\"enabledProtocols\"/&gt;\n        &lt;!-- The alias that identifies the key in the key store. --&gt;\n        &lt;property name=\"keyAlias\" value=\"keyalias\"/&gt;\n        &lt;!-- The password used to access the key in the key store. --&gt;\n        &lt;property name=\"keyPassword\" value=\"keypassword\"/&gt;\n        &lt;!-- The path to the key store. --&gt;\n        &lt;property name=\"keyStore\" value=\"/path/to/the/keystore.jks\"/&gt;\n        &lt;!-- The password used to load the key store. --&gt;\n        &lt;property name=\"keyStorePassword\" value=\"keystorepassword\"/&gt;\n        &lt;!-- The type of key store. --&gt;\n        &lt;property name=\"keyStoreType\" value=\"JKS\"/&gt;\n        &lt;!-- The provider for the key store. --&gt;\n        &lt;property name=\"keyStoreProvider\" value=\"BC\"/&gt;\n        &lt;!-- The path to the trust store. --&gt;\n        &lt;property name=\"trustStore\" value=\"/path/to/the/truststore.p12\"/&gt;\n        &lt;!-- The password used to load the trust store . --&gt;\n        &lt;property name=\"trustStorePassword\" value=\"truststorepassword\"/&gt;\n        &lt;!-- The type of trust store. --&gt;\n        &lt;property name=\"trustStoreType\" value=\"PKCS12\"/&gt;\n        &lt;!-- The provider for the trust store. --&gt;\n        &lt;property name=\"trustStoreProvider\" value=\"SUN\"/&gt;\n        &lt;!-- The SSL protocol to use. Default to TLS. --&gt;\n        &lt;property name=\"protocol\" value=\"TLS\"/&gt;\n        &lt;!-- Indicates whether hostname should be verify during SSL handshake. Defaults to true. --&gt;\n        &lt;property name=\"verifyHostname\" value=\"true\"/&gt;\n    &lt;/bean&gt;\n&lt;/beans&gt;\n</code></pre> <p>then</p> <p>short option<pre><code>jodconverter-cli -c \"https://localhost:8001\" -a ssl.xml timeout infile outfile\n</code></pre> or long option<pre><code>jodconverter-cli --connection-url \"https://localhost:8001\" --application-context ssl.xml timeout infile outfile\n</code></pre></p>"},{"location":"configuration/remote-configuration/#maxtasksperconnection","title":"\ud83d\udd22<code>maxTasksPerConnection</code>","text":"<p>This property sets the maximum number of tasks an office process can execute before reconnecting to it. 0 means an infinite number of tasks (will never reconnect).</p> <p> Default: 1000</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    RemoteOfficeManager\n        .builder()\n        .maxTasksPerConnection(500)\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  remote:\n    max-tasks-per-connection: 500\n</code></pre> application.properties<pre><code>jodconverter.remote.max-tasks-per-connection = 500\n</code></pre> <p><code>maxTasksPerConnection</code> can't be set with the command line tool, it will always be 200.</p>"},{"location":"configuration/remote-configuration/#taskqueuetimeout","title":"\u231a<code>taskQueueTimeout</code>","text":"<p>This property is used to set the maximum living time of a task in the conversion queue. The task will be removed from the queue if the waiting time is longer than this timeout and an <code>OfficeException</code> will be thrown.</p> <p> Default: 30000 (30 seconds)</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    RemoteOfficeManager\n        .builder()\n        .taskQueueTimeout(60000)\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  remote:\n    task-queue-timeout: 60000\n</code></pre> application.properties<pre><code>jodconverter.remote.task-queue-timeout = 60000\n</code></pre> <p><code>taskQueueTimeout</code> can't be set with the command line tool, it will always be 30000.</p>"},{"location":"configuration/remote-configuration/#taskexecutiontimeout","title":"\u231a<code>taskExecutionTimeout</code>","text":"<p>This property sets the maximum time allowed to process a task. If the processing time of a task is longer than this timeout, this task will be aborted and the next task is processed.</p> <p> Default: 120000 (2 minutes)</p> JavaSpring BootCommand Line <pre><code>OfficeManager officeManager =\n    RemoteOfficeManager\n        .builder()\n        .taskExecutionTimeout(60000)\n        .build();\n</code></pre> application.yml<pre><code>jodconverter:\n  remote:\n    task-execution-timeout: 60000\n</code></pre> application.properties<pre><code>jodconverter.remote.task-execution-timeout = 60000\n</code></pre> <p>short option<pre><code>jodconverter-cli -c \"https://localhost:8001\" -t 60000 infile outfile\n</code></pre> or long option<pre><code>jodconverter-cli --connection-url \"https://localhost:8001\" --timeout 60000 infile outfile\n</code></pre></p> <p>Whenever OpenOffice.org (OOo for short) is mentioned, this can generally be interpreted to include any office suite derived from OOo such as Apache OpenOffice and LibreOffice.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<ul> <li>Star the project on GitHub and help spread the word :)</li> <li>Join our Gitter Community   </li> <li>Contribute improvements or fixes using a Pull Request.   If you're going to contribute, thank you! Please just be sure to:<ol> <li>Check for open issues, or open a new issue to start a    discussion around a feature idea or a bug.</li> <li>If you feel uncomfortable or uncertain about an issue or your changes, feel free to contact us on Gitter using    the link above.</li> <li>Fork this repository on GitHub to start making your changes.</li> <li>Write a test showing that the bug was fixed or that the feature works as expected.</li> <li>Note that the repository follows the Google Java style.    You can format your code to this format by typing gradlew spotlessApply on the subproject you work on (e.g,    <code>gradlew :jodconverter-local:spotlessApply</code>), by using    the Eclipse plugin, or by using    the Intellij plugin.</li> <li>Create a pull request, and wait until it gets    merged and published.</li> </ol> </li> </ul>"},{"location":"contributing/documentation/","title":"Contributing to documentation","text":"<p>The JODConverter documentation is built with MkDocs, a static site generator for project documentation. We use the Material for MkDocs, which started as a simple theme for MkDocs, but became much more than that over the years. It is now a powerful documentation framework on top of MkDocs.</p> <p>Installing Material for MkDocs will automatically install all required dependencies.</p>"},{"location":"getting-started/command-line-tool/","title":"Command Line Tool","text":"<p>The command line tool provides a good way to check that everything is working, i.e., that you have the right OOo version installed etc. To convert a document, use the provided batch file, located in the bin directory of the cli module distribution.</p>"},{"location":"getting-started/command-line-tool/#syntax","title":"Syntax","text":"<pre><code>jodconverter-cli [options] infile outfile [infile outfile ...]\n</code></pre> <p>or</p> <pre><code>jodconverter-cli [options] -f output-format infile [infile ...]\n</code></pre>"},{"location":"getting-started/command-line-tool/#parameters","title":"Parameters","text":""},{"location":"getting-started/command-line-tool/#infile","title":"infile","text":"<p>The input file to convert (required). When used with the -f switch, infile may contain wildcards to match multiple files to convert. Thus, it is possible with the jodconverter-cli tool to convert more than 1 file at the time.</p>"},{"location":"getting-started/command-line-tool/#outfile","title":"outfile","text":"<p>The target file which is the result of the conversion.</p>"},{"location":"getting-started/command-line-tool/#-a-application-context-file","title":"-a, --application-context <code>&lt;file&gt;</code>","text":"<p>Application context file (optional).</p>"},{"location":"getting-started/command-line-tool/#-c-connection-url-url","title":"-c, --connection-url <code>&lt;url&gt;</code>","text":"<p>Remote LibreOffice Online server URL for conversion (optional).</p>"},{"location":"getting-started/command-line-tool/#-d-output-directory-dir","title":"-d, --output-directory <code>&lt;dir&gt;</code>","text":"<p>Output directory (optional; defaults to input directory).</p>"},{"location":"getting-started/command-line-tool/#-f-output-format-arg","title":"-f, --output-format <code>&lt;arg&gt;</code>","text":"<p>Output format (e.g. pdf).</p>"},{"location":"getting-started/command-line-tool/#-h-help","title":"-h, --help","text":"<p>Displays help at the command prompt.</p>"},{"location":"getting-started/command-line-tool/#-i-office-home-dir","title":"-i, --office-home <code>&lt;dir&gt;</code>","text":"<p>OOo home directory (optional; defaults to auto-detect). See Configuration.</p>"},{"location":"getting-started/command-line-tool/#-k-keep-alive","title":"-k, --keep-alive","text":"<p>Keep the office process alive on shutdown (optional; defaults to false). See Configuration.</p>"},{"location":"getting-started/command-line-tool/#-l-load-properties","title":"-l, --load-properties","text":"<p>Load properties (optional; eg. -lPassword=myPassword).</p>"},{"location":"getting-started/command-line-tool/#-m-process-manager-classname","title":"-m, --process-manager <code>&lt;classname&gt;</code>","text":"<p>Class name of the process manager to use (optional; defaults to auto-detect). See Configuration.</p>"},{"location":"getting-started/command-line-tool/#-h-host-name-arg","title":"-h, --host-name <code>&lt;arg&gt;</code>","text":"<p>Host name that will be used in the --accept argument when starting a process. See Configuration.</p>"},{"location":"getting-started/command-line-tool/#-o-overwrite","title":"-o, --overwrite","text":"<p>Overwrite existing output file (optional; defaults to false).</p>"},{"location":"getting-started/command-line-tool/#-p-port-arg","title":"-p, --port <code>&lt;arg&gt;</code>","text":"<p>Office socket port (optional; defaults to 2002). See Configuration.</p>"},{"location":"getting-started/command-line-tool/#-r-registry-file","title":"-r, --registry <code>&lt;file&gt;</code>","text":"<p>Document formats registry configuration file (optional).</p>"},{"location":"getting-started/command-line-tool/#-t-timeout-arg","title":"-t, --timeout <code>&lt;arg&gt;</code>","text":"<p>Maximum conversion time in seconds (optional; defaults to 120). See Configuration.</p>"},{"location":"getting-started/command-line-tool/#-u-user-profile-dir","title":"-u, --user-profile <code>&lt;dir&gt;</code>","text":"<p>Use settings from the given OOo user installation directory (optional). See Configuration.</p>"},{"location":"getting-started/command-line-tool/#-v-version","title":"-v, --version","text":"<p>Displays version information and exit.</p>"},{"location":"getting-started/command-line-tool/#-w-working-dir-dir","title":"-w, --working-dir <code>&lt;dir&gt;</code>","text":"<p>Directory where temporary office profile directories will be created (optional; defaults to java.io.tmpdir). See Configuration.</p>"},{"location":"getting-started/command-line-tool/#remarks","title":"Remarks","text":"<ul> <li>Using -a</li> </ul> <p>An application context configuration file is really a Spring configuration file, so a configuration file will start   with the following:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\n\n  &lt;!-- Configuration goes here! --&gt;\n\n&lt;/beans&gt;\n</code></pre> <p>A configuration file can be used to initialize   the filter chain that will be applied to the loaded   document before it is saved to the desired format. Here's an example of a configuration to create a filter chain that   will first insert a given text to the document, then will insert a graphic into it, and finally will apply the   configured text strings replacement:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\n\n  &lt;!-- Creation of all the required filters we want to add to the filter chain. --&gt;\n  &lt;bean id=\"textInserterFilter\" class=\"org.jodconverter.filter.text.TextInserterFilter\"&gt;\n    &lt;!-- Text to insert --&gt;\n    &lt;constructor-arg value=\"text to insert\" /&gt;\n    &lt;!-- Arguments related to the added box size and position --&gt;\n    &lt;constructor-arg value=\"100\" /&gt; &lt;!-- Width, 10 CM --&gt;\n    &lt;constructor-arg value=\"10\" /&gt;  &lt;!-- Height, 1 CM --&gt;\n    &lt;constructor-arg value=\"50\" /&gt;  &lt;!-- Horizontal Position, 5 CM --&gt;\n    &lt;constructor-arg value=\"100\" /&gt; &lt;!-- Vertical Position, 10 CM --&gt;\n  &lt;/bean&gt;\n  &lt;bean id=\"graphicInserterFilter\" class=\"org.jodconverter.filter.text.GraphicInserterFilter\"&gt;\n    &lt;!-- Path to the image --&gt;\n    &lt;constructor-arg value=\"src/integTest/resources/images/sample-1.jpg\" /&gt;\n    &lt;!-- Arguments related to the added box size and position --&gt;\n    &lt;constructor-arg value=\"50\" /&gt;  &lt;!-- Horizontal Position, 5 CM --&gt;\n    &lt;constructor-arg value=\"111\" /&gt; &lt;!-- Vertical Position, 11.1 CM (just under text box) --&gt;\n  &lt;/bean&gt;\n  &lt;bean id=\"textReplacerFilter\" class=\"org.jodconverter.filter.text.TextReplacerFilter\"&gt;\n    &lt;constructor-arg name=\"searchList\"&gt;\n      &lt;list&gt;\n        &lt;value&gt;text&lt;/value&gt;\n        &lt;value&gt;to insert&lt;/value&gt;\n      &lt;/list&gt;\n    &lt;/constructor-arg&gt;\n    &lt;constructor-arg name=\"replacementList\"&gt;\n      &lt;list&gt;\n        &lt;value&gt;Text&lt;/value&gt;\n        &lt;value&gt;describing the image below&lt;/value&gt;\n      &lt;/list&gt;\n    &lt;/constructor-arg&gt;\n  &lt;/bean&gt;\n\n  &lt;!-- Configure the filter chain that will be used while converting a document. --&gt;\n  &lt;bean id=\"filterChain\" class=\"org.jodconverter.filter.DefaultFilterChain\"&gt;\n    &lt;constructor-arg&gt;\n      &lt;list&gt;\n        &lt;ref bean=\"textInserterFilter\" /&gt;\n        &lt;ref bean=\"graphicInserterFilter\" /&gt;\n        &lt;ref bean=\"textReplacerFilter\" /&gt;\n      &lt;/list&gt;\n    &lt;/constructor-arg&gt;\n  &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre> <p>Combine with the -c switch, a configuration file can be used to initialize   the SSL Context of the connection   to the Libre Office Online server:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\n  &lt;!-- Configure the SSL to secure communication with a Libre Office Online server. --&gt;\n  &lt;bean class=\"org.jodconverter.ssl.SslConfig\"&gt;\n    &lt;!-- Indicates whether SSL support is enabled or not. --&gt;\n    &lt;property name=\"enabled\" value=\"true\" /&gt;\n    &lt;!-- Comma separated values of the supported SSL ciphers. Defaults to the JVM default values. --&gt;\n    &lt;property name=\"ciphers\" value=\"ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\" /&gt;\n    &lt;!-- Comma separated values of the enabled SSL protocols. Defaults to the JVM default values. --&gt;\n    &lt;property name=\"enabledProtocols\" value=\"enabledProtocols\" /&gt;\n    &lt;!-- The alias that identifies the key in the key store. --&gt;\n    &lt;property name=\"keyAlias\" value=\"keyalias\" /&gt;\n    &lt;!-- The password used to access the key in the key store. --&gt;\n    &lt;property name=\"keyPassword\" value=\"keypassword\" /&gt;\n    &lt;!-- The path to the key store. --&gt;\n    &lt;property name=\"keyStore\" value=\"/path/to/the/keystore.jks\" /&gt;\n    &lt;!-- The password used to load the key store. --&gt;\n    &lt;property name=\"keyStorePassword\" value=\"keystorepassword\" /&gt;\n    &lt;!-- The type of key store. --&gt;\n    &lt;property name=\"keyStoreType\" value=\"JKS\" /&gt;\n    &lt;!-- The provider for the key store. --&gt;\n    &lt;property name=\"keyStoreProvider\" value=\"BC\" /&gt;\n    &lt;!-- The path to the trust store. --&gt;\n    &lt;property name=\"trustStore\" value=\"/path/to/the/truststore.p12\" /&gt;\n    &lt;!-- The password used to load the trust store . --&gt;\n    &lt;property name=\"trustStorePassword\" value=\"truststorepassword\" /&gt;\n    &lt;!-- The type of trust store. --&gt;\n    &lt;property name=\"trustStoreType\" value=\"PKCS12\" /&gt;\n    &lt;!-- The provider for the trust store. --&gt;\n    &lt;property name=\"trustStoreProvider\" value=\"SUN\" /&gt;\n    &lt;!-- The SSL protocol to use. Default to TLS. --&gt;\n    &lt;property name=\"protocol\" value=\"TLS\" /&gt;\n    &lt;!-- Indicates whether hostname should be verify during SSL handshake. Defaults to true. --&gt;\n    &lt;property name=\"verifyHostname\" value=\"true\" /&gt;\n  &lt;/bean&gt;\n&lt;/beans&gt;\n</code></pre>"},{"location":"getting-started/java-library/","title":"Java Library","text":"<p>By default, JODConverter is built using the OpenOffice libraries. See here to know why. But you can now decide whether you want to use JODConverter with the LibreOffice libraries or the OpenOffice libraries.</p>"},{"location":"getting-started/java-library/#maven-dependencies","title":"Maven dependencies","text":""},{"location":"getting-started/java-library/#libreoffice","title":"LibreOffice","text":"GradleMaven Groovy<pre><code>implementation 'org.jodconverter:jodconverter-local-lo:4.4.10'\n</code></pre> Kotlin<pre><code>implementation(\"org.jodconverter:jodconverter-local-lo:4.4.10\")\n</code></pre> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.jodconverter&lt;/groupId&gt;\n    &lt;artifactId&gt;jodconverter-local-lo&lt;/artifactId&gt;\n    &lt;version&gt;4.4.10&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"getting-started/java-library/#openoffice","title":"OpenOffice","text":"GradleMaven Groovy<pre><code>implementation 'org.jodconverter:jodconverter-local:4.4.10'\n</code></pre> Kotlin<pre><code>implementation(\"org.jodconverter:jodconverter-local:4.4.10\")\n</code></pre> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.jodconverter&lt;/groupId&gt;\n    &lt;artifactId&gt;jodconverter-local&lt;/artifactId&gt;\n    &lt;version&gt;4.4.10&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>or</p> GradleMaven Groovy<pre><code>implementation 'org.jodconverter:jodconverter-local-oo:4.4.10'\n</code></pre> Kotlin<pre><code>implementation(\"org.jodconverter:jodconverter-local-oo:4.4.10\")\n</code></pre> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.jodconverter&lt;/groupId&gt;\n    &lt;artifactId&gt;jodconverter-local-oo&lt;/artifactId&gt;\n    &lt;version&gt;4.4.10&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"getting-started/java-library/#usage","title":"Usage","text":"<p>Using JODConverter in your own Java application is very straightforward. The following example shows the skeleton code required to perform a one-off conversion from a Word document to PDF:</p> <pre><code>File inputFile = new File(\"document.doc\");\nFile outputFile = new File(\"document.pdf\");\n\n// Create an office manager using the default configuration.\n// The default port is 2002. Note that when an office manager\n// is installed, it will be the one used by default when\n// a converter is created.\nLocalOfficeManager officeManager = LocalOfficeManager.install(); \ntry {\n\n    // Start an office process and connect to the started instance (on port 2002).\n    officeManager.start();\n\n    // Convert\n    JodConverter\n             .convert(inputFile)\n             .to(outputFile)\n             .execute();\n} finally {\n    // Stop the office process\n    OfficeUtils.stopQuietly(officeManager);\n}\n</code></pre> <p>To convert from/to other formats, change the file names and the formats will be determined based on file extensions; e.g., to convert an Excel file to OpenDocument Spreadsheet file:</p> <pre><code>File inputFile = new File(\"spreadsheet.xls\");\nFile outputFile = new File(\"spreadsheet.ods\");\nJodConverter\n         .convert(inputFile)\n         .to(outputFile)\n         .execute();\n</code></pre> <p>If you are working with streams instead of files, no problems! You have to inform JODConverter what the input and output document formats are; e.g.: to convert an Excel stream to OpenDocument Spreadsheet stream:</p> <pre><code>InputStream inputStream = ...\nOutputStream outputStream = ...\nJodConverter\n         .convert(inputStream)\n         .as(DefaultDocumentFormatRegistry.XLS)\n         .to(outputStream)\n         .as(DefaultDocumentFormatRegistry.ODS)\n         .execute();\n</code></pre> <p>Simple, isn't it? Yet this example actually shows almost everything you need to know for most applications.</p> <p>Almost because establishing a new connection each time you need to do a conversion, while perfectly acceptable, is not the best idea from a performance point of view. If you're integrating JODConverter in a web application, for example, you may want to initialize a single OfficeManager instance when the app is started and stop it when the app is stopped.</p> <p>There are many different ways to do this depending on which web framework (if any) you're using, so I'm not going to explain it here. For plain Servlet API you can use a context listener, for Spring you can use the jodconverter-spring or jodconverter-spring-boot-starter module, and so on.</p>"},{"location":"getting-started/libreoffice-online/","title":"LibreOffice Remote","text":"<p>This module integrates the Collabora Online / LibreOffice Online conversion functionality into JODConverter.</p> <p>Collabora Online and LibreOffice Online have built-in functionality to process conversions on a remote server. With this module, you can use the familiar JODConverter API in your applications to connect to the Online instance, which makes the conversion setup trivial, particularly when you are already running a Collabora Online or LibreOffice Online server for another need.</p> <p>You can also use the pre-built CODE (Collabora Online Development Edition) Docker container just for the conversions, to avoid the LibreOffice installation on your server.</p>"},{"location":"getting-started/libreoffice-online/#maven-setup","title":"Maven Setup","text":"<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.jodconverter&lt;/groupId&gt;\n        &lt;artifactId&gt;jodconverter-remote&lt;/artifactId&gt;\n        &lt;version&gt;4.9.0&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"getting-started/libreoffice-online/#gradle-setup","title":"Gradle Setup","text":"GroovyKotlin <pre><code>implementation \"org.jodconverter:jodconverter-remote:4.4.10\"\n</code></pre> <pre><code>implementation(\"org.jodconverter:jodconverter-remote:4.4.10\")\n</code></pre>"},{"location":"getting-started/libreoffice-online/#using-the-module","title":"Using the module","text":"<p>To convert documents using the remote module, you have to specify the address of a running Collabora Online or LibreOffice Online server.</p>"},{"location":"getting-started/libreoffice-online/#with-command-line-tool","title":"With Command Line Tool","text":"<p>When a connection url is specified with the -c or --connection-url option, the tool will use the remote module.</p>"},{"location":"getting-started/libreoffice-online/#java-library","title":"Java Library","text":"<pre><code>final RemoteOfficeManager officeManager = RemoteOfficeManager.make(\"http://path/to/myLibreOfficeOnlineServer\");\n</code></pre> <p>See Java Library for more.</p>"},{"location":"getting-started/libreoffice-online/#ssl-support","title":"SSL Support","text":"<p>When JODConverter remote is used as a Java Library, you must provide the SSL configuration while building the RemoteOfficeManager:</p> <pre><code>final SslConfig sslConfig = new SslConfig();\nsslConfig.setEnabled(true);\nsslConfig.setTrustStore(\"Path to the TrustStore\");\nsslConfig.setTrustStorePassword(\"Password of the TrustStore\");\n\nfinal OfficeManager manager =\n    RemoteOfficeManager.builder()\n        .urlConnection(\"http://path/to/myLibreOfficeOnlineServer\")\n        .sslConfig(sslConfig)\n        .build();\n</code></pre> <p>When JODConverter remote is used as a Command Line Tool, you must provide the SSL configuration through an application context configuration file, which is the -a or --application-context. Here's an example of an SSL configuration file.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\n\n    &lt;!-- Configure the SSL to secure communication with a Libre Office Online server. --&gt;\n    &lt;bean class=\"org.jodconverter.ssl.SslConfig\"&gt;\n        &lt;!-- Indicates whether SSL support is enabled or not. --&gt;\n        &lt;property name=\"enabled\" value=\"true\"/&gt;\n        &lt;!-- Comma separated values of the supported SSL ciphers. Defaults to the JVM default values. --&gt;\n        &lt;property name=\"ciphers\" value=\"ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\"/&gt;\n        &lt;!-- Comma separated values of the enabled SSL protocols. Defaults to the JVM default values. --&gt;\n        &lt;property name=\"enabledProtocols\" value=\"enabledProtocols\"/&gt;\n        &lt;!-- The alias that identifies the key in the key store. --&gt;\n        &lt;property name=\"keyAlias\" value=\"keyalias\"/&gt;\n        &lt;!-- The password used to access the key in the key store. --&gt;\n        &lt;property name=\"keyPassword\" value=\"keypassword\"/&gt;\n        &lt;!-- The path to the key store. --&gt;\n        &lt;property name=\"keyStore\" value=\"/path/to/the/keystore.jks\"/&gt;\n        &lt;!-- The password used to load the key store. --&gt;\n        &lt;property name=\"keyStorePassword\" value=\"keystorepassword\"/&gt;\n        &lt;!-- The type of key store. --&gt;\n        &lt;property name=\"keyStoreType\" value=\"JKS\"/&gt;\n        &lt;!-- The provider for the key store. --&gt;\n        &lt;property name=\"keyStoreProvider\" value=\"BC\"/&gt;\n        &lt;!-- The path to the trust store. --&gt;\n        &lt;property name=\"trustStore\" value=\"/path/to/the/truststore.p12\"/&gt;\n        &lt;!-- The password used to load the trust store . --&gt;\n        &lt;property name=\"trustStorePassword\" value=\"truststorepassword\"/&gt;\n        &lt;!-- The type of trust store. --&gt;\n        &lt;property name=\"trustStoreType\" value=\"PKCS12\"/&gt;\n        &lt;!-- The provider for the trust store. --&gt;\n        &lt;property name=\"trustStoreProvider\" value=\"SUN\"/&gt;\n        &lt;!-- The SSL protocol to use. Default to TLS. --&gt;\n        &lt;property name=\"protocol\" value=\"TLS\"/&gt;\n        &lt;!-- Indicates whether hostname should be verify during SSL handshake. Defaults to true. --&gt;\n        &lt;property name=\"verifyHostname\" value=\"true\"/&gt;\n    &lt;/bean&gt;\n&lt;/beans&gt;\n</code></pre>"},{"location":"getting-started/libreoffice-online/#using-the-collabora-online-libreoffice-online-without-jodconverter","title":"Using the Collabora Online / LibreOffice Online without JODConverter","text":"<p>It is possible to use the Online converting functionality directly, without the JODConverter API:</p>"},{"location":"getting-started/libreoffice-online/#libreoffice-online-api","title":"LibreOffice Online API","text":"<ul> <li>API: HTTP POST to /lool/convert-to/<ul> <li>the format is e.g. \"png\", \"pdf\" or \"txt\"</li> <li>the file itself in the payload</li> </ul> <li> <p>example</p> <ul> <li><code>curl -F \"data=@test.txt\" https://localhost:9980/lool/convert-to/docx &gt; out.docx</code></li> <li>or in html: <pre><code>&lt;form action=\"https://localhost:9980/lool/convert-to/docx\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n    File: &lt;input type=\"file\" name=\"data\"&gt;&lt;br/&gt;\n    &lt;input type=\"submit\" value=\"Convert to DOCX\"&gt;\n&lt;/form&gt;\n</code></pre></li> </ul> </li> <li> <p>alternatively you can omit the , and instead provide it as another   parameter <li>example<ul> <li><code>curl -F \"data=@test.odt\" -F \"format=pdf\" https://localhost:9980/lool/convert-to &gt; out.pdf</code></li> <li>or in html:</li> </ul> </li> <pre><code>     &lt;form action=\"https://localhost:9980/lool/convert-to\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n          File: &lt;input type=\"file\" name=\"data\"&gt;&lt;br/&gt;\n          Format: &lt;input type=\"text\" name=\"format\"&gt;&lt;br/&gt;\n          &lt;input type=\"submit\" value=\"Convert\"&gt;\n     &lt;/form&gt;\n</code></pre>"},{"location":"getting-started/libreoffice-online/#create-your-own-online-server","title":"Create your own Online server","text":"<p>The easiest way is using the Collabora Online Development Edition (CODE) Docker image.</p> <p>Alternatively you can build everything yourself, it is all Free Software :-)</p>"},{"location":"getting-started/libreoffice-portable/","title":"LibreOffice Portable","text":"<p>JODConverter should be compatible with LibreOffice Portable. All the documentation has been taken from here and is not actively maintained. If you find that this documentation should be updated, please open a GitHub issue with the details about what should be updated.</p> <p>Some important notes on how to use LibreOffice Portable with JODConverter:</p> <ol> <li> <p>The main problem occurring is that your LibreOffice settings contain machine/OS specific settings. Therefore it is    usually the case that if you distribute LibreOffice Portable with your software together with your preferred    settings, that the settings work on one machine, but cause LibreOffice to crash on another machine. To solve this    problem, use the safe mode of LibreOffice to factory reset the settings, then close it and make a copy of the    settings. Then restart LibreOffice normally with the GUI, select your preferred settings, then close LibreOffice    again. The settings will end up in registrymodifications.xcu. Unfortunately, LibreOffice adds a lot of extra settings    to the rest of the settings in the folder, therefore you just copy the registrymodifications.xcu to your factory    resetted settings copy you made before changing the settings. The registrymodifications.xcu will contain some extra    settings you did not select (as a good dev, you might want to clean them out until they are only the ones you    selected explicitly for better maintenance). However, the extra settings are not machine dependent and thus cause no    crash. Use the one folder of settings per LibreOffice instance mechanism (template profile setting) of JODConverter    so that none of your task processing LibreOffice instances will ever mess with your fragile settings.</p> </li> <li> <p>LibreOffice Portable can be used like an installed LibreOffice. Just set the LibreOffice home of JODConverter to    LibreofficePortable/App/libreoffice to make it use the soffice.exe and such, it is not required to make JODConverter    use the LibreofficePortable*.exe. The latter will even cause cleanup-problems, because JODConverter terminates the    binary but LibreOffice Portable does not clean up properly.</p> </li> <li> <p>It is important that you do not have a LibreOffice installed on your machine aside from the LibreOffice Portable you    are using. This will make your settings work flawlessly with LibreOffice Portable (everything will work great all the    time), but as you transfer to another machine with LibreOffice installed, things will not work anymore. So your    developer machine should have no LibreOffice installed, just as your testing computer should not have one installed.    This saves you a lot of time debugging spurious problems.</p> </li> <li> <p>If you want to make pipes work using JODConverter, but your system runs on a x64 machine, you need to additionally    distribute some libraries from the x64 version of LibreOffice, since there exists no x64 version of    LibreOfficePortable. To get the libraries, you install a LibreOffice x64 version on your computer (this might be in    conflict with the point 3 above, at least uninstall it again after you are done with this or use another machine than    your daily dev machine). Then you get the following dlls from the LibreOffice program folder: jpipe.dll, jpipx.dll,    sal3.dll, uwinapi.dll. These dlls will have to be on the Java path in order for your JODConverter to be able to use    the pipes. Additionally, you will have to install the Microsoft Visual C++ redistributable 2013 (x64) on the    machine (This might change in the future, so if it does not work, you will have to use a dll analyzer program to find    out what the dlls are linked to and then look for those names on the web to find out what these dlls belong to. Get    the dlls from trustworthy sources. You do not want to distribute a virus with your application.). This is because    some of the above dlls are liked against some of the redistributable dlls. I know it is hard and you want to cry, but    it will work in the end. But that seems to be the cost of making this stuff fully portable.</p> </li> </ol>"},{"location":"getting-started/performance/","title":"Performance","text":"<p>Conversion performance varies widely depending on the input document size and complexity, input and output formats etc. Since conversions are done by OOo, raw conversion time is not something that can be improved by JODConverter.</p> <p>Just to give an idea, the following table shows some benchmarks for converting different ODT documents to PDF:</p> Document Size Pages Avg Time (ms) Throughput (per minute) Hello World! 7 kb 1 p 98 ms 612 p/m Metadata Use Cases and Requirements 13 kb 5 p 710 ms 422 p/m Open Document Format v1.1 Accessibility Guidelines 81 kb 52 p 2314 ms 1348 p/m OpenDocument v1.1 Specification 475 kb 737 p 24084 ms 1836 p/m <p>Tests made with jodconverter-cli and Apache OpenOffice 4.1.3 on a laptop with a quad-core Intel(R) Core(TM) i7-6500U CPU @ 2.50GHz processor and Windows 10</p> <p>In general, conversions to/from OpenDocument take less time than equivalent conversions involving other formats since OpenDocument is the native OOo format. (E.g., ODT to PDF is faster than DOC to PDF.) Other factors affecting performance include the presence of graphics, charts, and other objects in the document, macros etc.</p> <p>The bottom line is that you should make some benchmarks of your own - with documents of the types and complexities required by your application - to understand if the performance is adequate for your purposes, or if you need to throw more hardware at the problem.</p>"},{"location":"getting-started/supported-formats/","title":"Supported Formats","text":"<p>JODConverter automates conversions that are actually performed by OOo. This means that if you can convert from format ABC to format XYZ from OOo (by opening ABC and saving/exporting to XYZ) then you can do the same with JODConverter. You have to discover the magic string used by OOo as the export filter name. A useful list can be found in the OpenOffice Wiki or the LibreOffice documentation.</p> <p>That said, JODConverter maintains a registry of the most common formats, their associated file extensions, mime types, and OOo filter names to simplify your life. These predefined conversions are shown in the following table (if a format is not there, it doesn't mean that the format is not supported. The same is also true if the format is there and the conversion does not work. All conversions supported by your OOo installation are supported by JODConverter):</p> Format FamilyFrom (any of)To (any of) Text *.odt OpenDocument Text *.ott OpenDocument Text Template *.sxw OpenOffice.org 1.0 Text *.rtf Rich Text Format *.doc Microsoft Word *.docx Microsoft Word XML *.wpd WordPerfect *.txt Plain Text *.html HTML<sup>1</sup> *.pdf Portable Document Format *.odt OpenDocument Text *.ott OpenDocument Text Template *.sxw OpenOffice.org 1.0 Text *.rtf Rich Text Format *.doc Microsoft Word *.docx Microsoft Word XML *.txt Plain Text *.html HTML<sup>2</sup> *.wiki MediaWiki wikitext          Spreadsheet *.ods OpenDocument Spreadsheet *.ots OpenDocument Spreadsheet Template *.sxc OpenOffice.org 1.0 Spreadsheet *.xls Microsoft Excel *.xlsx Microsoft Excel XML *.csv Comma-Separated Values *.tsv Tab-Separated Values          *.pdf Portable Document Format *.ods OpenDocument Spreadsheet *.ots OpenDocument Spreadsheet Template *.sxc OpenOffice.org 1.0 Spreadsheet *.xls Microsoft Excel *.xlsx Microsoft Excel XML *.csv Comma-Separated Values *.tsv Tab-Separated Values *.html HTML<sup>2</sup> Presentation *.odp OpenDocument Presentation *.otp OpenDocument Presentation Template *.sxi OpenOffice.org 1.0 Presentation *.ppt Microsoft PowerPoint *.pptx Microsoft PowerPoint XML          *.pdf Portable Document Format *.swf Macromedia Flash *.odp OpenDocument Presentation *.otp OpenDocument Presentation Template *.sxi OpenOffice.org 1.0 Presentation *.ppt Microsoft PowerPoint *.pptx Microsoft PowerPoint XML *.html HTML<sup>2</sup> Drawing *.odg OpenDocument Drawing *.otg OpenDocument Drawing Template          *.svg Scalable Vector Graphics *.swf Macromedia Flash          <p> </p> <ol> <li>HTML can be used as an input format but you should not expect OOo to properly render complex web pages as Chrome or      IE do. Works reasonably well for simple and \"printer friendly\" web pages only.</li> <li>HTML can be used as an output format but while all other formats always generate a single output file, HTML can      produce multiple files. In addition to the HTML file in fact, any images contained in the input document will also      be saved in the same directory. This requires extra care in your code, especially in a web environment.</li> </ol>"},{"location":"getting-started/system-requirements/","title":"System Requirements","text":""},{"location":"getting-started/system-requirements/#system-requirements","title":"System Requirements","text":"<ul> <li>A Java runtime environment version 1.8 or higher.</li> <li>Apache OpenOffice or LibreOffice; the latest stable   version is usually recommended.</li> <li> <p>Any operating system for which Java and Apache OpenOffice/LibreOffice are available (Windows, Linux, Mac OS X,   Solaris, FreeBSD, etc.). Refer to the system requirements of the OOo distribution you plan to use for operating   system requirements.</p> <ul> <li>Apache OpenOffice system requirements.</li> <li>LibreOffice system requirements.</li> <li>For use as a web application / web service you will also need a servlet container such as   Apache Tomcat.</li> </ul> </li> </ul>"},{"location":"getting-started/using-filters/","title":"Using Filters","text":"<p>When converting a document, JODConverter allows you to modify the loaded source document before it is stored into the target format. The source document itself will never be modified, only the loaded one will. What you can do as modifications is only limit by what you can do with OOo. Processing conversion using JODConverter is the same as opening the document yourself with OOo, apply your modifications, whatever they are, and then use the File &gt; Save As menu item to save your document as the desired format (pdf, txt, docx, etc.).</p> <p>Suppose you want to export only the second page of a RTF document as HTML. Using OOo, the faster way would be to select the second page, copy it (Ctrl+C), then select the whole document (Ctrl+A), and paste the previously copied page (Ctrl + V). Finally, you would use the File &gt;Save As menu item to export your modified document as HTML.</p> <p>This is exactly what the PagesSelectorFilter is doing. The following example will convert only the second page of a given source document:</p> <pre><code>final File inputFile = new File(\"document.rtf\");\nfinal File outputFile = new File(\"document.html\");\n\nfinal PageSelectorFilter selectorFilter = new PageSelectorFilter(2);\n\nLocalConverter\n  .builder()\n  .filterChain(selectorFilter)\n  .build()\n  .convert(inputFile)\n  .to(outputFile)\n  .execute();\n</code></pre> <p>Note that you can use more than one filter per conversion. Also, such a filter (page selector) is only required when the target format is not PDF. Indeed, when converting to PDF, you are better off using custom store properties:</p> <pre><code>File inputFile = new File(\"document.rtf\");\nFile outputFile = new File(\"document.pdf\");\n\nMap&lt;String, Object&gt; filterData = new HashMap&lt;&gt;();\nfilterData.put(\"PageRange\", \"2\");\nMap&lt;String, Object&gt; customProperties = new HashMap&lt;&gt;();\ncustomProperties.put(\"FilterData\", filterData);\n\nLocalConverter\n  .builder()\n  .storeProperties(customProperties)\n  .build()\n  .convert(inputFile)\n  .to(outputFile)\n  .execute();\n</code></pre> <p>JODConverter provides some filters out of the box, but you can implement (and share obviously \ud83d\ude01) any filter you need. Your filter must implement the Filter interface and is responsible to call the next filter in the filter chain.</p>"},{"location":"samples/","title":"Samples","text":"<p>Here you will find sample projects using JODConverter.</p> <p>The projects demonstrate typical use cases using the JODConverter project. They include:</p> <ul> <li><code>samples/basic-webapp</code>: Demonstrates how to use the   jodconverter-local-lo module to   build a basic web application.</li> <li><code>samples/spring-boot-rest</code>: Demonstrates how to use   the jodconverter-spring-boot-starter   module to build a REST API supporting document conversions.</li> <li><code>samples/spring-boot-webapp</code>: Demonstrates how to use   the jodconverter-spring-boot-starter   module to build a web application with thymeleaf and bootstrap.</li> </ul>"},{"location":"samples/#build-and-run","title":"Build and run","text":"<p>See the subprojects. In short</p> <pre><code># run webapp\n./gradlew :samples:spring-boot-webapp:bootRun\n# build rest-app\n./gradlew :samples:spring-boot-rest:bootRun\n</code></pre> <p>You can access the apps via <code>http://localhost:8080</code></p>"},{"location":"samples/#docker-based","title":"Docker based","text":"<p>If you do not have a local java SDK or just prefer docker, use</p> <pre><code># run webapp\ndocker run --rm -p 8080:8080 ghcr.io/jodconverter/jodconverter-examples:gui\n\n# unr rest-only app\ndocker run --rm -p 8080:8080 ghcr.io/jodconverter/jodconverter-examples:rest\n</code></pre> <p>You can access the apps via <code>http://localhost:8080</code></p> <p>The docker images are build in jodconverter/docker-image-jodconverter-examples. Use them as a starting point for an application, if you like.</p>"},{"location":"samples/basic-webapp/","title":"Basic Web Application","text":"<p>A basic example of a web application is available in the JODConverter Samples repository; the basic-webapp module.</p> <p>The most important concept is that you should start your OfficeManager instance(s) when your webapp starts, stop it(them), when your webapp stops, and share it(them) across all requests. The OfficeManager(s) will take care of multi-threading.</p> <p>The sample is a web application that uses the local module jodconverter-local-lo library of the JODConverter project, which means the jodconverter-local built with the LibreOffice dependencies.</p>"},{"location":"samples/basic-webapp/#running-the-project-using-gradle","title":"Running the project using Gradle","text":"<p>First, build the project:</p> <pre><code>gradlew :samples:basic-webapp:build\n</code></pre> <p>Then, run:</p> <pre><code>gradlew :samples:basic-webapp:tomcatRun\n</code></pre> <p>If you experience a connection issue on Windows, you may have to set a system property pointing to a templateProfileDir where OpenGL is disabled by default. Read this to know how to disable OpenGL. Then, run:</p> <pre><code>gradlew :samples:basic-webapp:tomcatRun -Dorg.jodconverter.local.manager.templateProfileDir=&lt;path to your directory&gt;\n</code></pre> <p>Once started, use your favorite browser and visit this page:</p> <pre><code>http://localhost:8080/jodconverter-sample-webapp/\n</code></pre> <p>Happy conversions!!</p>"},{"location":"samples/spring-boot-rest/","title":"Spring Boot REST API","text":"Update <p>See here for an improved version, meaning production ready, of this project!</p> <p>A basic example of a Spring Boot REST API is available in the JODConverter Samples repository; the spring-boot-rest module.</p> <p>This is a sample application of a REST API that uses the spring boot integration module, jodconverter-spring-boot-starter, with the local module jodconverter-local-lo library of the JODConverter project, which means the jodconverter-local built with the LibreOffice dependencies.</p> <p>The goal was to emulate a Collabora Online server that would support the customization of custom (known) load/store properties.</p> <p>Note</p> <p>The exposed REST API interface imitates the Collabora Online REST interface (/lool), you could think of this example as a Collabora Online server.</p>"},{"location":"samples/spring-boot-rest/#running-the-project-using-gradle","title":"Running the project using Gradle","text":"<p>First, build the project:</p> <pre><code>gradlew :samples:spring-boot-rest:build\n</code></pre> <p>Then, run:</p> <pre><code>gradlew :samples:spring-boot-rest:bootRun\n</code></pre> <p>If you experience a connection issue on Windows, you may have to set a system property pointing to a templateProfileDir where OpenGL is disabled by default. Read this to know how to disable OpenGL. Then, run:</p> <pre><code>gradlew :samples:spring-boot-rest:bootRun -Dorg.jodconverter.local.manager.templateProfileDir=&lt;path to your directory&gt;\n</code></pre> <p>Once started, use your favorite browser and visit this page:</p> <pre><code>http://localhost:8080/\n</code></pre> <p>Happy conversions!!</p>"},{"location":"samples/spring-boot-webapp/","title":"Spring Boot Web Application","text":"<p>A basic example of a Spring Boot web application is available in the JODConverter Samples repository; the spring-boot-webapp module.</p> <p>This is a sample web application that uses the spring boot integration module, jodconverter-spring-boot-starter, with the local module jodconverter-local-lo library of the JODConverter project, which means the jodconverter-local built with the LibreOffice dependencies.</p>"},{"location":"samples/spring-boot-webapp/#running-the-project-using-gradle","title":"Running the project using Gradle","text":"<p>First, build the project:</p> <pre><code>gradlew :samples:spring-boot-webapp:build\n</code></pre> <p>Then, run:</p> <pre><code>gradlew :samples:spring-boot-webapp:bootRun\n</code></pre> <p>If you experience a connection issue on Windows, you may have to set a system property pointing to a templateProfileDir where OpenGL is disabled by default. Read this to know how to disable OpenGL. Then, run:</p> <pre><code>gradlew :samples:spring-boot-webapp:bootRun -Dorg.jodconverter.local.manager.templateProfileDir=&lt;path to your directory&gt;\n</code></pre> <p>Once started, use your favorite browser and visit this page:</p> <pre><code>http://localhost:8080/\n</code></pre> <p>Happy conversions!!</p>"},{"location":"snippets/note/","title":"Note","text":"<p>Whenever OpenOffice.org (OOo for short) is mentioned, this can generally be interpreted to include any office suite derived from OOo such as Apache OpenOffice and LibreOffice.</p>"}]}